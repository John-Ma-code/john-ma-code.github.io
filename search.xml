<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>还在用Tableau画雷达图吗？用Pyecharts库，只需几行代码瞬间搞定雷达图</title>
    <url>/2021/03/07/pyecharts%E9%9B%B7%E8%BE%BE%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="还在用Tableau画雷达图吗？用Pyecharts库，只需几行代码瞬间搞定雷达图"><a href="#还在用Tableau画雷达图吗？用Pyecharts库，只需几行代码瞬间搞定雷达图" class="headerlink" title="还在用Tableau画雷达图吗？用Pyecharts库，只需几行代码瞬间搞定雷达图"></a>还在用Tableau画雷达图吗？用Pyecharts库，只需几行代码瞬间搞定雷达图</h1><h3 id="Pyecharts"><a href="#Pyecharts" class="headerlink" title="Pyecharts."></a>Pyecharts.</h3><p>Pyecharts是我国开发人员开发的，相比较Matplotlib、Seaborn等可视化，Pyehcarts十分符合国内用户的习惯。<br>Pyecharts的目的是实现Echarts与Python的对接，以便在Python中使用Echarts生成图表。<br>Echarts是Apache软件基金会的一个数据可视化JavaScript库，生成图的可视化效果非常好，其凭借良好的交互性，精巧的图表设计，得到众多开发者的认可。</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">ld_pict = pd.read_excel(<span class="string">&quot;雷达图数据.xlsx&quot;</span>,index_col=<span class="number">0</span>)</span><br><span class="line">ld_pict.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>进攻能力</th>
      <th>进攻能力.1</th>
      <th>辅助能力</th>
      <th>拆塔能力</th>
      <th>打钱能力</th>
      <th>单挑能力</th>
      <th>团战能力</th>
      <th>升级速度</th>
      <th>存活能力</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>玩家A</th>
      <td>3.60</td>
      <td>3.60</td>
      <td>3.11</td>
      <td>4.49</td>
      <td>3.72</td>
      <td>2.54</td>
      <td>4.35</td>
      <td>4.28</td>
      <td>1.75</td>
    </tr>
    <tr>
      <th>玩家B</th>
      <td>4.43</td>
      <td>4.43</td>
      <td>2.95</td>
      <td>4.48</td>
      <td>4.33</td>
      <td>2.65</td>
      <td>4.43</td>
      <td>4.28</td>
      <td>2.05</td>
    </tr>
    <tr>
      <th>玩家C</th>
      <td>4.31</td>
      <td>4.31</td>
      <td>2.44</td>
      <td>3.75</td>
      <td>4.63</td>
      <td>1.75</td>
      <td>2.50</td>
      <td>3.50</td>
      <td>3.13</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由于进攻能力多出一列，故将该列删除</span></span><br><span class="line">ld_pict.drop(<span class="string">&quot;进攻能力.1&quot;</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ld_pict</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>进攻能力</th>
      <th>辅助能力</th>
      <th>拆塔能力</th>
      <th>打钱能力</th>
      <th>单挑能力</th>
      <th>团战能力</th>
      <th>升级速度</th>
      <th>存活能力</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>玩家A</th>
      <td>3.60</td>
      <td>3.11</td>
      <td>4.49</td>
      <td>3.72</td>
      <td>2.54</td>
      <td>4.35</td>
      <td>4.28</td>
      <td>1.75</td>
    </tr>
    <tr>
      <th>玩家B</th>
      <td>4.43</td>
      <td>2.95</td>
      <td>4.48</td>
      <td>4.33</td>
      <td>2.65</td>
      <td>4.43</td>
      <td>4.28</td>
      <td>2.05</td>
    </tr>
    <tr>
      <th>玩家C</th>
      <td>4.31</td>
      <td>2.44</td>
      <td>3.75</td>
      <td>4.63</td>
      <td>1.75</td>
      <td>2.50</td>
      <td>3.50</td>
      <td>3.13</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts <span class="comment">#用以设置</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Radar <span class="comment">#导入雷达类</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里需要告诉pyecharts编辑器为jupyter lab</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig, NotebookType,_WarningControl </span><br><span class="line">CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里为了忽略pyecharts1.9.0之后的版本中出现的警告</span></span><br><span class="line">_WarningControl.ShowWarning = <span class="literal">False</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">value_list = [[ld_pict.iloc[i,:].values.tolist()] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ld_pict.index))]</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">radar1=(</span><br><span class="line">    Radar()</span><br><span class="line">    .add_schema(<span class="comment"># 添加schema架构</span></span><br><span class="line">        schema=[</span><br><span class="line">            opts.RadarIndicatorItem(name=ld_pict.columns[<span class="number">0</span>],max_=<span class="number">5</span>),<span class="comment"># 设置指示器名称和最大值</span></span><br><span class="line">            opts.RadarIndicatorItem(name=ld_pict.columns[<span class="number">1</span>],max_=<span class="number">5</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=ld_pict.columns[<span class="number">2</span>],max_=<span class="number">5</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=ld_pict.columns[<span class="number">3</span>],max_=<span class="number">5</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=ld_pict.columns[<span class="number">4</span>],max_=<span class="number">5</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=ld_pict.columns[<span class="number">5</span>],max_=<span class="number">5</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=ld_pict.columns[<span class="number">6</span>],max_=<span class="number">5</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=ld_pict.columns[<span class="number">7</span>],max_=<span class="number">5</span>),</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    .add(ld_pict.index[<span class="number">0</span>],value_list[<span class="number">0</span>],color=<span class="string">&quot;#f9713c&quot;</span>) <span class="comment"># 添加一条数据，参数1为数据名，参数2为数据，参数3为颜色</span></span><br><span class="line">    .add(ld_pict.index[<span class="number">1</span>],value_list[<span class="number">1</span>],color=<span class="string">&quot;#4169E1&quot;</span>) </span><br><span class="line">    .add(ld_pict.index[<span class="number">2</span>],value_list[<span class="number">2</span>],color=<span class="string">&quot;#00BFFF&quot;</span>) </span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;雷达图&#x27;</span>),)</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 这里必须先加载js才能正常显示图形</span></span><br><span class="line">radar1.load_javascript()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">radar1.render_notebook()</span><br></pre></td></tr></table></figure>



<p><img src="/images/%E9%9B%B7%E8%BE%BE%E5%9B%BE.png" alt="雷达图"></p>
<p><strong>看起来代码比较长，大部分还是在数据的处理上，真正画图的就是几步而已</strong></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pyrcharts</tag>
      </tags>
  </entry>
  <entry>
    <title>pyecharts 饼图 玫瑰图</title>
    <url>/2021/03/10/pyecharts%E9%A5%BC%E5%9B%BE%20%E7%8E%AB%E7%91%B0%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h1><span id="more"></span>
<h2 id="一、-饼图"><a href="#一、-饼图" class="headerlink" title="一、 饼图"></a>一、 饼图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig, NotebookType  </span><br><span class="line">CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_data = [<span class="string">&quot;深度学习&quot;</span>, <span class="string">&quot;数据分析&quot;</span>, <span class="string">&quot;Web开发&quot;</span>, <span class="string">&quot;爬虫&quot;</span>, <span class="string">&quot;图像处理&quot;</span>]</span><br><span class="line">y_data = [<span class="number">688</span>, <span class="number">888</span>, <span class="number">560</span>, <span class="number">388</span>, <span class="number">480</span>]</span><br><span class="line">data_pair = [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(x_data, y_data)]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_pair</span><br></pre></td></tr></table></figure>




<pre><code>[[&#39;深度学习&#39;, 688], [&#39;数据分析&#39;, 888], [&#39;Web开发&#39;, 560], [&#39;爬虫&#39;, 388], [&#39;图像处理&#39;, 480]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_pair.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_pair</span><br></pre></td></tr></table></figure>




<pre><code>[[&#39;爬虫&#39;, 388], [&#39;图像处理&#39;, 480], [&#39;Web开发&#39;, 560], [&#39;深度学习&#39;, 688], [&#39;数据分析&#39;, 888]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pie = (</span><br><span class="line">    Pie(init_opts=opts.InitOpts(width=<span class="string">&quot;1200px&quot;</span>, height=<span class="string">&quot;800px&quot;</span>, bg_color=<span class="string">&quot;#2c343c&quot;</span>))</span><br><span class="line">    .add(</span><br><span class="line">        series_name=<span class="string">&quot;学习方向&quot;</span>, <span class="comment"># 系列名称</span></span><br><span class="line">        data_pair=data_pair, <span class="comment"># 数据格式为[(key1,value1),(key2,value2)]</span></span><br><span class="line">        rosetype=<span class="string">&quot;radius&quot;</span>, <span class="comment"># radius：扇区圆心角展现数据的百分比，半径展现数据的大小</span></span><br><span class="line">        radius=<span class="string">&quot;55%&quot;</span>,             <span class="comment"># 饼图的半径</span></span><br><span class="line">        center=[<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],    <span class="comment"># 饼图的中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标</span></span><br><span class="line">        </span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(</span><br><span class="line">            title=<span class="string">&quot;Customized Pie&quot;</span>,</span><br><span class="line">            pos_left=<span class="string">&quot;center&quot;</span>,</span><br><span class="line">            pos_top=<span class="string">&quot;20&quot;</span>,</span><br><span class="line">            title_textstyle_opts=opts.TextStyleOpts(color=<span class="string">&quot;#fff&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_series_opts(</span><br><span class="line">        tooltip_opts=opts.TooltipOpts(</span><br><span class="line">            trigger=<span class="string">&quot;item&quot;</span>, formatter=<span class="string">&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot;</span>  <span class="comment"># &#x27;item&#x27;: 数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用</span></span><br><span class="line">         ),</span><br><span class="line">        label_opts=opts.LabelOpts(color=<span class="string">&quot;rgba(255, 255, 255, 0.3)&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">pie.load_javascript()</span><br></pre></td></tr></table></figure>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pie.render_notebook()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/10/pyecharts%E9%A5%BC%E5%9B%BE%20%E7%8E%AB%E7%91%B0%E5%9B%BE/%E9%A5%BC%E5%9B%BE.png" alt="图像"></p>
<h2 id="二、-环形图"><a href="#二、-环形图" class="headerlink" title="二、 环形图"></a>二、 环形图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line">c = (</span><br><span class="line">    Pie()</span><br><span class="line">    .add(</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(Faker.choose(), Faker.values())],</span><br><span class="line">        <span class="comment"># 饼图的半径，数组的第一项是内半径，第二项是外半径</span></span><br><span class="line">        <span class="comment"># 默认设置成百分比，相对于容器高宽中较小的一项的一半</span></span><br><span class="line">        radius=[<span class="string">&quot;40%&quot;</span>, <span class="string">&quot;60%&quot;</span>],</span><br><span class="line">    )</span><br><span class="line">    .set_colors([<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;	#800000&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;#000000&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;purple&quot;</span>])</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;Pie-Radius&quot;</span>),</span><br><span class="line">        legend_opts=opts.LegendOpts(orient=<span class="string">&quot;vertical&quot;</span>, pos_top=<span class="string">&quot;15%&quot;</span>, pos_left=<span class="string">&quot;2%&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&quot;&#123;b&#125;: &#123;c&#125; &quot;</span>))</span><br><span class="line">)</span><br><span class="line">c.load_javascript()</span><br></pre></td></tr></table></figure>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure>



<p><img src="/2021/03/10/pyecharts%E9%A5%BC%E5%9B%BE%20%E7%8E%AB%E7%91%B0%E5%9B%BE/%E7%8E%AF%E5%BD%A2%E5%9B%BE.png" alt="图像"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">labels = [<span class="string">&#x27;可乐&#x27;</span>, <span class="string">&#x27;雪碧&#x27;</span>, <span class="string">&#x27;橙汁&#x27;</span>, <span class="string">&#x27;奶茶&#x27;</span>, <span class="string">&#x27;冰啤酒&#x27;</span>, <span class="string">&#x27;柠檬水&#x27;</span>]</span><br><span class="line">values = [<span class="number">6</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">52</span>, <span class="number">72</span>, <span class="number">96</span>]</span><br><span class="line">v = Faker.choose()</span><br><span class="line">c = (</span><br><span class="line">    Pie()</span><br><span class="line">    .add(</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(Faker.choose(), Faker.values())],</span><br><span class="line">        radius=[<span class="string">&quot;40%&quot;</span>, <span class="string">&quot;75%&quot;</span>],</span><br><span class="line">        center=[<span class="string">&quot;22%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        rosetype=<span class="string">&quot;radius&quot;</span>,</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line">    .add(</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(Faker.choose(), Faker.values())],</span><br><span class="line">        radius=[<span class="string">&quot;40%&quot;</span>, <span class="string">&quot;75%&quot;</span>],</span><br><span class="line">        center=[<span class="string">&quot;70%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        rosetype=<span class="string">&quot;area&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Pie-玫瑰图示例&quot;</span>),</span><br><span class="line">                     legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>)</span><br><span class="line">                     )</span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line">c.load_javascript()</span><br></pre></td></tr></table></figure>






<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.render()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/10/pyecharts%E9%A5%BC%E5%9B%BE%20%E7%8E%AB%E7%91%B0%E5%9B%BE/%E7%8E%AB%E7%91%B0%E5%9B%BE.png" alt="图像"></p>
<h2 id="三、南丁格尔玫瑰图"><a href="#三、南丁格尔玫瑰图" class="headerlink" title="三、南丁格尔玫瑰图"></a>三、南丁格尔玫瑰图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">provinces = [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;黑龙江&#x27;</span>,<span class="string">&#x27;吉林&#x27;</span>,<span class="string">&#x27;辽宁&#x27;</span>,<span class="string">&#x27;内蒙古&#x27;</span>,<span class="string">&#x27;新疆&#x27;</span>,<span class="string">&#x27;西藏&#x27;</span>,<span class="string">&#x27;青海&#x27;</span>,<span class="string">&#x27;四川&#x27;</span>,<span class="string">&#x27;云南&#x27;</span>,<span class="string">&#x27;陕西&#x27;</span>,<span class="string">&#x27;重庆&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;贵州&#x27;</span>,<span class="string">&#x27;广西&#x27;</span>,<span class="string">&#x27;海南&#x27;</span>,<span class="string">&#x27;澳门&#x27;</span>,<span class="string">&#x27;湖南&#x27;</span>,<span class="string">&#x27;江西&#x27;</span>,<span class="string">&#x27;福建&#x27;</span>,<span class="string">&#x27;安徽&#x27;</span>,<span class="string">&#x27;浙江&#x27;</span>,<span class="string">&#x27;江苏&#x27;</span>,<span class="string">&#x27;宁夏&#x27;</span>,<span class="string">&#x27;山西&#x27;</span>,<span class="string">&#x27;河北&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>]</span><br><span class="line">num = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">42</span>,<span class="number">35</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">37</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">22</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">13</span>,<span class="number">13</span>]</span><br><span class="line">color_series = [<span class="string">&#x27;#FAE927&#x27;</span>,<span class="string">&#x27;#E9E416&#x27;</span>,<span class="string">&#x27;#C9DA36&#x27;</span>,<span class="string">&#x27;#9ECB3C&#x27;</span>,<span class="string">&#x27;#6DBC49&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;#37B44E&#x27;</span>,<span class="string">&#x27;#3DBA78&#x27;</span>,<span class="string">&#x27;#14ADCF&#x27;</span>,<span class="string">&#x27;#209AC9&#x27;</span>,<span class="string">&#x27;#1E91CA&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;#2C6BA0&#x27;</span>,<span class="string">&#x27;#2B55A1&#x27;</span>,<span class="string">&#x27;#2D3D8E&#x27;</span>,<span class="string">&#x27;#44388E&#x27;</span>,<span class="string">&#x27;#6A368B&#x27;</span></span><br><span class="line">                <span class="string">&#x27;#7D3990&#x27;</span>,<span class="string">&#x27;#A63F98&#x27;</span>,<span class="string">&#x27;#C31C88&#x27;</span>,<span class="string">&#x27;#D52178&#x27;</span>,<span class="string">&#x27;#D5225B&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;#D02C2A&#x27;</span>,<span class="string">&#x27;#D44C2D&#x27;</span>,<span class="string">&#x27;#F57A34&#x27;</span>,<span class="string">&#x27;#FA8F2F&#x27;</span>,<span class="string">&#x27;#D99D21&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;#CF7B25&#x27;</span>,<span class="string">&#x27;#CF7B25&#x27;</span>,<span class="string">&#x27;#CF7B25&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建DataFrame</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;provinces&#x27;</span>: provinces, <span class="string">&#x27;num&#x27;</span>: num&#125;)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>provinces</th>
      <th>num</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>北京</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>上海</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>黑龙江</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>吉林</td>
      <td>17</td>
    </tr>
    <tr>
      <th>4</th>
      <td>辽宁</td>
      <td>9</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sort_values(by=<span class="string">&quot;num&quot;</span>,ascending=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取数据</span></span><br><span class="line">v = df[<span class="string">&#x27;provinces&#x27;</span>].values.tolist()</span><br><span class="line">d = df[<span class="string">&#x27;num&#x27;</span>].values.tolist()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制饼图</span></span><br><span class="line">pie1 = Pie(init_opts=opts.InitOpts(width=<span class="string">&#x27;1250px&#x27;</span>, height=<span class="string">&#x27;750px&#x27;</span>))</span><br><span class="line"><span class="comment"># 设置颜色</span></span><br><span class="line">pie1.set_colors(color_series)</span><br><span class="line"></span><br><span class="line">pie1.add(<span class="string">&quot;&quot;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(v, d)],</span><br><span class="line">        radius=[<span class="string">&quot;30%&quot;</span>, <span class="string">&quot;100%&quot;</span>],</span><br><span class="line">        center=[<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        rosetype=<span class="string">&quot;area&quot;</span></span><br><span class="line">        )</span><br><span class="line"><span class="comment"># 设置全局配置项</span></span><br><span class="line">pie1.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;多省区市\n确诊病例连续多日&#x27;</span>,subtitle=<span class="string">&#x27;零新增&#x27;</span>,</span><br><span class="line">                                               title_textstyle_opts=opts.TextStyleOpts(font_size=<span class="number">25</span>,color= <span class="string">&#x27;#0085c3&#x27;</span>),</span><br><span class="line">                                               subtitle_textstyle_opts= opts.TextStyleOpts(font_size=<span class="number">50</span>,color= <span class="string">&#x27;#003399&#x27;</span>),</span><br><span class="line">                                               pos_right= <span class="string">&#x27;center&#x27;</span>,pos_left= <span class="string">&#x27;center&#x27;</span>,pos_top=<span class="string">&#x27;42%&#x27;</span>,pos_bottom=<span class="string">&#x27;center&#x27;</span></span><br><span class="line">                                              ),</span><br><span class="line">                     legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                     toolbox_opts=opts.ToolboxOpts())</span><br><span class="line"><span class="comment"># 设置系列配置项</span></span><br><span class="line">pie1.set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">True</span>, position=<span class="string">&quot;inside&quot;</span>, font_size=<span class="number">12</span>,</span><br><span class="line">                                               formatter=<span class="string">&quot;&#123;b&#125;:&#123;c&#125;天&quot;</span>, font_style=<span class="string">&quot;italic&quot;</span>,</span><br><span class="line">                                               font_weight=<span class="string">&quot;bold&quot;</span>, font_family=<span class="string">&quot;SimHei&quot;</span></span><br><span class="line">                                               ),</span><br><span class="line">                     )</span><br><span class="line">pie1.load_javascript()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pie1.render_notebook()</span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/10/pyecharts%E9%A5%BC%E5%9B%BE%20%E7%8E%AB%E7%91%B0%E5%9B%BE/%E5%8D%97%E4%B8%81%E6%A0%BC%E5%B0%94%E7%8E%AB%E7%91%B0%E5%9B%BE.png" alt="图像"></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
  </entry>
  <entry>
    <title>python爬取瓜子二手车</title>
    <url>/2021/03/10/python%E7%88%AC%E5%8F%96%E7%93%9C%E5%AD%90%E4%BA%8C%E6%89%8B%E8%BD%A6/</url>
    <content><![CDATA[<p>自己平时比较喜欢车，但是又没钱，于是萌生了一个购买二手车的想法，最近二手车的市场行情是怎样的呢，这次爬取了二手车交易网站，了解一下交易的行情。</p>
<p>于是，本人便兴高采烈地打开了网站，还是根据爬虫的基本流程，首先对网页结构进行分析，发现二手车网站只显示50个页面的二手车信息。<br>按下F12,清除cookie,清除浏览器缓存，刷新页面，得到了下面这个页面。</p>
<span id="more"></span>
<p><img src="/2021/03/10/python%E7%88%AC%E5%8F%96%E7%93%9C%E5%AD%90%E4%BA%8C%E6%89%8B%E8%BD%A6/1.png" alt="image.png"></p>
<p>首先。我看到了这两个buy文件，响应码分别是203和200，这是如果常玩爬虫的人，<br>便会想到这里边一定有猫腻，于是我打开了第一个buy页面，果然response的响应页面是看不到详细信息的，<br>既然如此，我们便打开第二个页面看一下，发现了我们想要的内容，如下：</p>
<p><img src="/2021/03/10/python%E7%88%AC%E5%8F%96%E7%93%9C%E5%AD%90%E4%BA%8C%E6%89%8B%E8%BD%A6/2.png" alt="image.png"></p>
<p>这时，便可以写代码了，进行提取了，但是当我在进行请求时，却得不到想要的信息，这时我想可能是请求头的cookie出了问题，很有可能这里的cookie是根据上面的页面，动态生成的。</p>
<p>这就和前一个Buy脱不了干系，于是我用爬虫对第一个文件进了请求，想看一下里边到底有什么内容，<br>经过请求发现响应内容是乱码的js,如图所示：</p>
<p><img src="/2021/03/10/python%E7%88%AC%E5%8F%96%E7%93%9C%E5%AD%90%E4%BA%8C%E6%89%8B%E8%BD%A6/3.png" alt="image.png"></p>
<p>仔细观察可发现，这里边是由一个eval()函数包着的，搜索antipas参数果然在这个响应文件中，那么就需要对该该js进行解码，<br>这是我只需要cosole.log()这个函数就可以了，得到解码后的js,如下图所示：</p>
<p><img src="/2021/03/10/python%E7%88%AC%E5%8F%96%E7%93%9C%E5%AD%90%E4%BA%8C%E6%89%8B%E8%BD%A6/4.png" alt="image.png"></p>
<p>这里，只是稍微讲一下，那么接下来，就是写代码了，代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.guazi.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.guazi.com/www/buy/o50c-1/&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;88&quot;, &quot;Google Chrome&quot;;v=&quot;88&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-User&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">city = <span class="built_in">input</span>(<span class="string">&quot;请输入要查询的地点缩写：&quot;</span>)</span><br><span class="line">url=<span class="string">&quot;https://www.guazi.com/%s/buy&quot;</span> % city</span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line">pattern = <span class="string">r&quot;value=anti\(&#x27;zoQ5hc4WI7OKZKzz0yvwhTimCXIlNazFSgv7ysBQVIE=&#x27;,&#x27;(\d+?)&#x27;\)&quot;</span></span><br><span class="line">ptt = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">key = re.findall(ptt,response.text)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">print(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;EXECJS_RUNTIME&quot;</span>] = <span class="string">&quot;PhantomJS&quot;</span></span><br><span class="line">node = execjs.get()</span><br><span class="line">file = <span class="string">&#x27;guaizi_1.js&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js_data = f.read()</span><br><span class="line"></span><br><span class="line">result = execjs.<span class="built_in">compile</span>(js_data).call(<span class="string">&#x27;anti&#x27;</span>,<span class="string">&#x27;zoQ5hc4WI7OKZKzz0yvwhTimCXIlNazFSgv7ysBQVIE=&#x27;</span>,key)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;rfnl=https://www.guazi.com/%s/buy; antipas=%s&#x27;</span> % (city,result),</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.guazi.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.guazi.com/%s/buy&#x27;</span> % city,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;88&quot;, &quot;Google Chrome&quot;;v=&quot;88&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">car_list=[]</span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">    print(page)</span><br><span class="line">    url = <span class="string">&quot;https://www.guazi.com/%s/buy/o%s&quot;</span> % (city,page)</span><br><span class="line">    req = requests.get(url,headers=headers)</span><br><span class="line">    html = etree.HTML(req.text)</span><br><span class="line">    li_bq_list = html.xpath(<span class="string">&#x27;//ul[@class=&quot;carlist clearfix js-top&quot;]/li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> li_bq <span class="keyword">in</span> li_bq_list:</span><br><span class="line">        car_dict = &#123;&#125;</span><br><span class="line">        desc_car = li_bq.xpath(<span class="string">&#x27;./a/h2/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        sevice_list = li_bq.xpath(<span class="string">&#x27;./a/div[@class=&quot;t-i&quot;]/text()&#x27;</span>)</span><br><span class="line">        xianjia_list = li_bq.xpath(<span class="string">&#x27;./a/div[@class=&quot;t-price&quot;]/p//text()&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            yuanjia = li_bq.xpath(<span class="string">&#x27;./a/div[@class=&quot;t-price&quot;]/em/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            yuanjia=<span class="string">&quot;&quot;</span></span><br><span class="line">        xianjia = <span class="string">&#x27;&#x27;</span>.join(xianjia_list).strip()</span><br><span class="line">        car_dict[<span class="string">&#x27;基本描述&#x27;</span>] = desc_car</span><br><span class="line">        car_dict[<span class="string">&#x27;服务&#x27;</span>] = sevice_list</span><br><span class="line">        car_dict[<span class="string">&#x27;原价&#x27;</span>] = yuanjia</span><br><span class="line">        car_dict[<span class="string">&#x27;现价&#x27;</span>] = xianjia</span><br><span class="line">        print(car_dict)</span><br><span class="line">        car_list.append(car_dict)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">df_car = pd.DataFrame(car_list)</span><br><span class="line">print(df_car)</span><br><span class="line">df_car.to_excel(<span class="string">&#x27;bj_car.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最终，将其放在excel中，结果如图所示：</p>
<p><img src="/2021/03/10/python%E7%88%AC%E5%8F%96%E7%93%9C%E5%AD%90%E4%BA%8C%E6%89%8B%E8%BD%A6/5.png" alt="image.png"></p>
<p>想要源码的可以评论区，留邮箱。</p>
]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>seaborn的基本使用</title>
    <url>/2021/03/09/seaborn%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>介绍python一种常用的的绘图库，他是对matplotlib的基本封装，并进行了美化，其调用起来<br>比较方便，所以还是有必要学习一下的。</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br></pre></td></tr></table></figure>


<figure class="highlight"><table><tr><td class="code"><pre><span class="line">?sns.set_style</span><br></pre></td></tr></table></figure>



<pre><code>Set the aesthetic style of the plots.

This affects things like the color of the axes, whether a grid is
enabled by default, and other aesthetic elements.

Parameters
----------
style : dict, None, or one of &#123;darkgrid, whitegrid, dark, white, ticks&#125;
    A dictionary of parameters or the name of a preconfigured set.
rc : dict, optional
    Parameter mappings to override the values in the preset seaborn
    style dictionaries. This only updates parameters that are
    considered part of the style definition.

Examples
--------
&gt;&gt;&gt; set_style(&quot;whitegrid&quot;)

&gt;&gt;&gt; set_style(&quot;ticks&quot;, &#123;&quot;xtick.major.size&quot;: 8, &quot;ytick.major.size&quot;: 8&#125;)

See Also
--------
axes_style : return a dict of parameters or use in a ``with`` statement
             to temporarily set the style.
set_context : set parameters to scale plot elements
set_palette : set the default color palette for figures
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set_style(<span class="string">&#x27;whitegrid&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="1-数值型变量"><a href="#1-数值型变量" class="headerlink" title="1. 数值型变量"></a>1. 数值型变量</h2><h3 id="1-1-单变量分布和多变量分布"><a href="#1-1-单变量分布和多变量分布" class="headerlink" title="1.1 单变量分布和多变量分布"></a>1.1 单变量分布和多变量分布</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里采用seaborn自带的数据集，鸢尾花数据集</span></span><br><span class="line">iris = sns.load_dataset(<span class="string">&#x27;iris&#x27;</span>)</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sepal_length</th>
      <th>sepal_width</th>
      <th>petal_length</th>
      <th>petal_width</th>
      <th>species</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5.1</td>
      <td>3.5</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4.9</td>
      <td>3.0</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>2</th>
      <td>4.7</td>
      <td>3.2</td>
      <td>1.3</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.6</td>
      <td>3.1</td>
      <td>1.5</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5.0</td>
      <td>3.6</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
  </tbody>
</table>
</div>



<ul>
<li>jointplot</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.jointplot(x=<span class="string">&quot;sepal_length&quot;</span>,y=<span class="string">&quot;sepal_width&quot;</span>,data=iris)</span><br></pre></td></tr></table></figure>








<p><img src="/images/output_8_1.png" alt="png"></p>
<ul>
<li>pairplot</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.pairplot(data=iris)</span><br></pre></td></tr></table></figure>









<p><img src="/images/output_10_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># distplot(直方图)</span></span><br><span class="line">sns.distplot(iris[<span class="string">&#x27;sepal_length&#x27;</span>],rug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>









<p><img src="/images/output_11_1.png" alt="png"></p>
<h3 id="1-2-关系型图表"><a href="#1-2-关系型图表" class="headerlink" title="1.2 关系型图表"></a>1.2 关系型图表</h3><p>不同种类花的两变量散点图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.scatterplot(x=<span class="string">&quot;sepal_width&quot;</span>,y=<span class="string">&quot;sepal_length&quot;</span>,hue=<span class="string">&quot;species&quot;</span>,data=iris)</span><br></pre></td></tr></table></figure>









<p><img src="/images/output_14_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">sns.lineplot(x=<span class="string">&quot;sepal_width&quot;</span>,y=<span class="string">&quot;sepal_length&quot;</span>,hue=<span class="string">&quot;species&quot;</span>,data=iris)</span><br></pre></td></tr></table></figure>









<p><img src="/images/output_15_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.regplot(x=<span class="string">&quot;sepal_width&quot;</span>,y=<span class="string">&quot;sepal_length&quot;</span>,data=iris)</span><br></pre></td></tr></table></figure>









<p><img src="/images/output_16_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 残差分布图</span></span><br><span class="line">sns.residplot(x=<span class="string">&quot;sepal_width&quot;</span>,y=<span class="string">&quot;sepal_length&quot;</span>,data=iris)</span><br></pre></td></tr></table></figure>









<p><img src="/images/output_17_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tips= sns.load_dataset(<span class="string">&#x27;tips&#x27;</span>)</span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>total_bill</th>
      <th>tip</th>
      <th>sex</th>
      <th>smoker</th>
      <th>day</th>
      <th>time</th>
      <th>size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>16.99</td>
      <td>1.01</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>10.34</td>
      <td>1.66</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>2</th>
      <td>21.01</td>
      <td>3.50</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23.68</td>
      <td>3.31</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24.59</td>
      <td>3.61</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据性别及是否抽烟，以及时间段，来看小费总额与小费的关系</span></span><br><span class="line">sns.lmplot(x=<span class="string">&quot;total_bill&quot;</span>,y=<span class="string">&quot;tip&quot;</span>,row=<span class="string">&#x27;sex&#x27;</span>,col=<span class="string">&quot;smoker&quot;</span>,hue=<span class="string">&quot;time&quot;</span>,data=tips)</span><br></pre></td></tr></table></figure>




<p><img src="/images/output_19_1.png" alt="png"></p>
<h3 id="1-3-矩阵图"><a href="#1-3-矩阵图" class="headerlink" title="1.3 矩阵图"></a>1.3 矩阵图</h3><p><strong>主要用于相关性分析</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.heatmap(iris.corr(),annot=<span class="literal">True</span>,fmt=<span class="string">&quot;.2f&quot;</span>,cmap=<span class="string">&quot;Blues&quot;</span>)</span><br></pre></td></tr></table></figure>









<p><img src="/images/output_22_1.png" alt="png"></p>
<h2 id="2-分类数据"><a href="#2-分类数据" class="headerlink" title="2. 分类数据"></a>2. 分类数据</h2><h3 id="2-1-散点图"><a href="#2-1-散点图" class="headerlink" title="2.1 散点图"></a>2.1 散点图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># swarmplot</span></span><br><span class="line"><span class="comment"># 每一天根据男女不同的小费分布</span></span><br><span class="line">sns.swarmplot(x=<span class="string">&quot;day&quot;</span>,y=<span class="string">&quot;tip&quot;</span>,hue=<span class="string">&quot;sex&quot;</span>,data=tips)</span><br></pre></td></tr></table></figure>








<p><img src="/images/output_25_1.png" alt="png"></p>
<h3 id="2-2-分布图"><a href="#2-2-分布图" class="headerlink" title="2.2 分布图"></a>2.2 分布图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 箱线图，表达了给分类数据下4分位数与离群点信息</span></span><br><span class="line">sns.boxplot(x=<span class="string">&quot;day&quot;</span>,y=<span class="string">&quot;tip&quot;</span>,hue=<span class="string">&quot;sex&quot;</span>,data=tips)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x21734900370&gt;
</code></pre>
<p><img src="/images/output_27_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小提琴图</span></span><br><span class="line">sns.violinplot(x=<span class="string">&quot;day&quot;</span>,y=<span class="string">&quot;tip&quot;</span>,hue=<span class="string">&quot;sex&quot;</span>,data=tips,split=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>









<p><img src="/images/output_28_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 条形图</span></span><br><span class="line">sns.barplot(x=<span class="string">&#x27;day&#x27;</span>,y=<span class="string">&#x27;tip&#x27;</span>,hue=<span class="string">&#x27;sex&#x27;</span>,data=tips)</span><br></pre></td></tr></table></figure>









<p><img src="/images/output_29_1.png" alt="png"></p>
<p>这里只介绍几种个人常用的API，若想详细了解，请<a href="http://seaborn.pydata.org/api.html">参考</a></p>
]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>携程酒店评论情感分析</title>
    <url>/2021/04/16/%E6%90%BA%E7%A8%8B%E9%85%92%E5%BA%97%E8%AF%84%E8%AE%BA%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="一、数据的导入与查看"><a href="#一、数据的导入与查看" class="headerlink" title="一、数据的导入与查看"></a>一、数据的导入与查看</h1><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> jieba</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&#x27;ChnSentiCorp_htl_all.csv&#x27;</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>label</th>
      <th>review</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>距离川沙公路较近,但是公交指示不对,如果是"蔡陆线"的话,会非常麻烦.建议用别的路线.房间较...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>商务大床房，房间很大，床有2M宽，整体感觉经济实惠不错!</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>早餐太差，无论去多少人，那边也不加食品的。酒店应该重视一下这个问题了。房间本身很好。</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>宾馆在小街道上，不大好找，但还好北京热心同胞很多~宾馆设施跟介绍的差不多，房间很小，确实挺小...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>CBD中心,周围没什么店铺,说5星有点勉强.不知道为什么卫生间没有电吹风</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.label.value_counts()</span><br></pre></td></tr></table></figure>




<pre><code>1    5322
0    2444
Name: label, dtype: int64
</code></pre>
<p>标签比例差距过大，可考虑采取过采样，欠采样等方式，不能用accuray.</p>
<h1 id="二、数据处理及可视化"><a href="#二、数据处理及可视化" class="headerlink" title="二、数据处理及可视化"></a>二、数据处理及可视化</h1><h2 id="2-1-数据的基本清洗"><a href="#2-1-数据的基本清洗" class="headerlink" title="2.1 数据的基本清洗"></a>2.1 数据的基本清洗</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&quot;review&quot;</span>].duplicated().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>0
</code></pre>
<p>没有重复评论,不需要作重复值处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 7766 entries, 0 to 7765
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype 
---  ------  --------------  ----- 
 0   label   7766 non-null   int64 
 1   review  7765 non-null   object
dtypes: int64(1), object(1)
memory usage: 121.5+ KB
</code></pre>
<p>评论列有空值，可以进行删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = data[data[<span class="string">&#x27;review&#x27;</span>].notnull()]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Int64Index: 7765 entries, 0 to 7765
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype 
---  ------  --------------  ----- 
 0   label   7765 non-null   int64 
 1   review  7765 non-null   object
dtypes: int64(1), object(1)
memory usage: 182.0+ KB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;分词&#x27;</span>] = data[<span class="string">&#x27;review&#x27;</span>].apply(<span class="keyword">lambda</span> x: jieba.lcut(x))</span><br></pre></td></tr></table></figure>

<pre><code>Building prefix dict from the default dictionary ...
Loading model from cache C:\Users\huige\AppData\Local\Temp\jieba.cache
Loading model cost 1.443 seconds.
Prefix dict has been built successfully.
</code></pre>
<h2 id="2-2-读取停用词进行分词处理"><a href="#2-2-读取停用词进行分词处理" class="headerlink" title="2.2 读取停用词进行分词处理"></a>2.2 读取停用词进行分词处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hit_stopwords.txt&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    stop_word = f.read()</span><br><span class="line">stop = stop_word.split()+[<span class="string">&quot; &quot;</span>,<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;\t&quot;</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;分词_01&#x27;</span>] = data[<span class="string">&#x27;分词&#x27;</span>].apply(<span class="keyword">lambda</span> x:[i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> stop])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&#x27;分词_01&#x27;</span>]:</span><br><span class="line">    c.append(<span class="string">&#x27; &#x27;</span>.join(i))</span><br><span class="line">data[<span class="string">&#x27;分词_02&#x27;</span>] = pd.Series(c)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>label</th>
      <th>review</th>
      <th>分词</th>
      <th>分词_01</th>
      <th>分词_02</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>距离川沙公路较近,但是公交指示不对,如果是"蔡陆线"的话,会非常麻烦.建议用别的路线.房间较...</td>
      <td>[距离, 川沙, 公路, 较近, ,, 但是, 公交, 指示, 不, 对, ,, 如果, 是...</td>
      <td>[距离, 川沙, 公路, 较近, 公交, 指示, 不, 蔡陆线, 会, 非常, 麻烦, 建议...</td>
      <td>距离 川沙 公路 较近 公交 指示 不 蔡陆线 会 非常 麻烦 建议 路线 房间 较为简单</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>商务大床房，房间很大，床有2M宽，整体感觉经济实惠不错!</td>
      <td>[商务, 大床, 房, ，, 房间, 很大, ，, 床有, 2M, 宽, ，, 整体, 感觉...</td>
      <td>[商务, 大床, 房, 房间, 很大, 床有, 2M, 宽, 整体, 感觉, 经济, 实惠,...</td>
      <td>商务 大床 房 房间 很大 床有 2M 宽 整体 感觉 经济 实惠 不错 !</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>早餐太差，无论去多少人，那边也不加食品的。酒店应该重视一下这个问题了。房间本身很好。</td>
      <td>[早餐, 太, 差, ，, 无论, 去, 多少, 人, ，, 那边, 也, 不加, 食品, ...</td>
      <td>[早餐, 太, 差, 去, 人, 不加, 食品, 酒店, 应该, 重视, 一下, 问题, 房...</td>
      <td>早餐 太 差 去 人 不加 食品 酒店 应该 重视 一下 问题 房间 本身 很 好</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>宾馆在小街道上，不大好找，但还好北京热心同胞很多~宾馆设施跟介绍的差不多，房间很小，确实挺小...</td>
      <td>[宾馆, 在, 小, 街道, 上, ，, 不大好, 找, ，, 但, 还好, 北京, 热心,...</td>
      <td>[宾馆, 小, 街道, 上, 不大好, 找, 还好, 北京, 热心, 同胞, 很多, ~, ...</td>
      <td>宾馆 小 街道 上 不大好 找 还好 北京 热心 同胞 很多 ~ 宾馆 设施 介绍 差不多 ...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>CBD中心,周围没什么店铺,说5星有点勉强.不知道为什么卫生间没有电吹风</td>
      <td>[CBD, 中心, ,, 周围, 没什么, 店铺, ,, 说, 5, 星, 有点, 勉强, ...</td>
      <td>[CBD, 中心, 周围, 没什么, 店铺, 说, 5, 星, 有点, 勉强, 不, 知道,...</td>
      <td>CBD 中心 周围 没什么 店铺 说 5 星 有点 勉强 不 知道 卫生间 没有 电吹风</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="2-3-制作词云图"><a href="#2-3-制作词云图" class="headerlink" title="2.3 制作词云图"></a>2.3 制作词云图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zzz  =[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&#x27;分词_01&#x27;</span>]:</span><br><span class="line">    zzz.extend(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word_count = pd.Series(zzz).value_counts()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word_count.head()</span><br></pre></td></tr></table></figure>




<pre><code>酒店    10055
很      7135
房间     6981
不错     3885
都      3832
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 制作mask</span></span><br><span class="line">back_picture = np.array(Image.<span class="built_in">open</span>(<span class="string">&#x27;卡通.png&#x27;</span>))</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wc = WordCloud(</span><br><span class="line">    font_path=<span class="string">&quot;SimHei.ttf&quot;</span>,</span><br><span class="line">    background_color=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">    mask=back_picture,</span><br><span class="line">    max_words=<span class="number">2000</span>,</span><br><span class="line">    max_font_size=<span class="number">200</span>,</span><br><span class="line">    random_state=<span class="number">42</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wc2 = wc.fit_words(word_count)</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line">plt.imshow(wc2)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">wc.to_file(<span class="string">&#x27;ciyun.png&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/16/%E6%90%BA%E7%A8%8B%E9%85%92%E5%BA%97%E8%AF%84%E8%AE%BA%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/output_26_0.png" alt="png"></p>
<pre><code>&lt;wordcloud.wordcloud.WordCloud at 0x1ac8a47ea30&gt;
</code></pre>
<p>总体来看，顾客的对酒店的评价偏向于正面；”房间”,”设施”,”服务”,”方便”,”价格”等是消费者入住主要考虑的方面。</p>
<h1 id="三、评论情感倾向预测"><a href="#三、评论情感倾向预测" class="headerlink" title="三、评论情感倾向预测"></a>三、评论情感倾向预测</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Int64Index: 7765 entries, 0 to 7765
Data columns (total 5 columns):
 #   Column  Non-Null Count  Dtype 
---  ------  --------------  ----- 
 0   label   7765 non-null   int64 
 1   review  7765 non-null   object
 2   分词      7765 non-null   object
 3   分词_01   7765 non-null   object
 4   分词_02   7764 non-null   object
dtypes: int64(1), object(4)
memory usage: 364.0+ KB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data =data[data[<span class="string">&#x27;分词_02&#x27;</span>].notnull()]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显然样本存在严重的不均衡问题，这里考虑两种样本均衡的策略</span></span><br><span class="line"><span class="comment"># 1. 欠采样：正负样本各2000条，一共4000条</span></span><br><span class="line"><span class="comment"># 2. 过采样：正负样本各3000条，一种6000条</span></span><br><span class="line"><span class="comment">#为减少计算量和对比两种均衡策略的效果，这里采用先把整体数据进行处理，在做样本均衡采样</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_balanced_words</span>(<span class="params">size,</span></span></span><br><span class="line"><span class="function"><span class="params">                        positive_comment=data[data[<span class="string">&#x27;label&#x27;</span>]== <span class="number">1</span>],</span></span></span><br><span class="line"><span class="function"><span class="params">                        negtive_comment=data[data[<span class="string">&#x27;label&#x27;</span>]==<span class="number">0</span>]</span>):</span></span><br><span class="line">    word_size = size // <span class="number">2</span></span><br><span class="line">    <span class="comment">#获取正负评论数</span></span><br><span class="line">    num_pos = positive_comment.shape[<span class="number">0</span>]</span><br><span class="line">    num_neg = negtive_comment.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#   当正（负）品论数中&lt; 采样数量/2时，则进行上采样，否则都是下采样；</span></span><br><span class="line">    <span class="comment">#   其中pandas的sample方法里的replace参数代表是否进行上采样，默认不进行</span></span><br><span class="line"></span><br><span class="line">    balanced_words = pd.concat([</span><br><span class="line">        positive_comment.sample(word_size,</span><br><span class="line">                                replace=num_pos &lt;word_size,</span><br><span class="line">                                random_state=<span class="number">0</span>),</span><br><span class="line">        negtive_comment.sample(word_size,</span><br><span class="line">                                replace=num_neg &lt; word_size,</span><br><span class="line">                                random_state=<span class="number">0</span>)</span><br><span class="line">    ])</span><br><span class="line">    <span class="comment">#    打印样本个数</span></span><br><span class="line">    print(<span class="string">&#x27;样本总数：&#x27;</span>,balanced_words.shape[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">&#x27;正样本数：&#x27;</span>,balanced_words[data[<span class="string">&#x27;label&#x27;</span>]== <span class="number">1</span>].shape[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">&#x27;负样本数：&#x27;</span>,balanced_words[data[<span class="string">&#x27;label&#x27;</span>]== <span class="number">0</span>].shape[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> balanced_words</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_4000 = get_balanced_words(<span class="number">4000</span>) <span class="comment"># 欠采样</span></span><br><span class="line">data_6000 = get_balanced_words(<span class="number">6000</span>) <span class="comment"># 过采样</span></span><br></pre></td></tr></table></figure>

<pre><code>样本总数： 4000
正样本数： 2000
负样本数： 2000

样本总数： 6000
正样本数： 3000
负样本数： 3000



&lt;ipython-input-23-c19d02b6f0f5&gt;:21: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  print(&#39;正样本数：&#39;,balanced_words[data[&#39;label&#39;]== 1].shape[0])
&lt;ipython-input-23-c19d02b6f0f5&gt;:22: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  print(&#39;负样本数：&#39;,balanced_words[data[&#39;label&#39;]== 0].shape[0])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_4000.sample(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>label</th>
      <th>review</th>
      <th>分词</th>
      <th>分词_01</th>
      <th>分词_02</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>5315</th>
      <td>1</td>
      <td>地理位置实在是好。我住的是单人大床房，进屋一看竟然跟套房一样，不过一个小屋有桌子和电视，另一...</td>
      <td>[地理位置, 实在, 是, 好, 。, 我, 住, 的, 是, 单, 人大, 床房, ，, ...</td>
      <td>[地理位置, 实在, 好, 住, 单, 人大, 床房, 进屋, 一看, 竟然, 套房, 小屋...</td>
      <td>地理位置 实在 好 住 单 人大 床房 进屋 一看 竟然 套房 小屋 桌子 电视 小屋 只能...</td>
    </tr>
    <tr>
      <th>2612</th>
      <td>1</td>
      <td>酒店的整体服务意识相当好，从办理登记入住、用餐、退房等方面都是五星级的服务。入住当晚我们想外...</td>
      <td>[酒店, 的, 整体, 服务, 意识, 相当, 好, ，, 从, 办理, 登记, 入住, 、...</td>
      <td>[酒店, 整体, 服务, 意识, 相当, 好, 办理, 登记, 入住, 用餐, 退房, 方面...</td>
      <td>酒店 整体 服务 意识 相当 好 办理 登记 入住 用餐 退房 方面 都 五星级 服务 入住...</td>
    </tr>
    <tr>
      <th>241</th>
      <td>1</td>
      <td>饭店有些旧但房间干净,住高层向北房间安静,假如下次再去大同会再住.</td>
      <td>[饭店, 有些, 旧, 但, 房间, 干净, ,, 住, 高层, 向北, 房间, 安静, ,...</td>
      <td>[饭店, 旧, 房间, 干净, 住, 高层, 向北, 房间, 安静, 下次, 再, 去, 大...</td>
      <td>饭店 旧 房间 干净 住 高层 向北 房间 安静 下次 再 去 大同 会 再 住</td>
    </tr>
    <tr>
      <th>5557</th>
      <td>0</td>
      <td>我觉得这个酒店应该是我住过的能评上四星级酒店最烂最烂最烂的一间了。首先，房间还没进门，过道里...</td>
      <td>[我, 觉得, 这个, 酒店, 应该, 是, 我, 住, 过, 的, 能, 评上, 四星级,...</td>
      <td>[觉得, 酒店, 应该, 住, 评上, 四星级, 酒店, 最烂, 最烂, 最烂, 一间, 房...</td>
      <td>觉得 酒店 应该 住 评上 四星级 酒店 最烂 最烂 最烂 一间 房间 还 没 进门 过道 ...</td>
    </tr>
    <tr>
      <th>6361</th>
      <td>0</td>
      <td>之前和你们电话反映了，2个问题。1，不接受携程客户用信用卡。你们和酒店负责人确认后，给我的回...</td>
      <td>[之前, 和, 你们, 电话, 反映, 了, ，, 2, 个, 问题, 。, 1, ，, 不...</td>
      <td>[之前, 电话, 反映, 2, 问题, 1, 不, 接受, 携程, 客户, 信用卡, 酒店,...</td>
      <td>之前 电话 反映 2 问题 1 不 接受 携程 客户 信用卡 酒店 负责人 确认 后 回答 ...</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="3-1-欠采样"><a href="#3-1-欠采样" class="headerlink" title="3.1 欠采样"></a>3.1 欠采样</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(data_4000[<span class="string">&#x27;分词_02&#x27;</span>],</span><br><span class="line">                                                    data_4000[<span class="string">&#x27;label&#x27;</span>],</span><br><span class="line">                                                    random_state=<span class="number">1</span>,</span><br><span class="line"><span class="comment">#                                                     test_size=0.2,</span></span><br><span class="line">                                                    shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train.shape</span><br></pre></td></tr></table></figure>




<pre><code>(3000,)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y_train.shape</span><br></pre></td></tr></table></figure>




<pre><code>(3000,)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf_idf =TfidfVectorizer()</span><br><span class="line">X_train_vec = tf_idf.fit_transform(X_train)</span><br><span class="line">X_test_vec = tf_idf.transform(X_test)</span><br><span class="line">print(X_train_vec.shape)</span><br><span class="line">print(X_test_vec.shape)</span><br></pre></td></tr></table></figure>

<pre><code>(3000, 16592)
(1000, 16592)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_trian_vec = X_train_vec.astype(np.float64)   <span class="comment">#   转换为numpy的float类型，便于sklearn处理</span></span><br><span class="line">X_test_vec = X_test_vec.astype(np.float64)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> f_classif</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, roc_auc_score, confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 降维</span></span><br><span class="line">selector = SelectKBest(f_classif,k=<span class="built_in">min</span>(<span class="number">150</span>,X_trian_vec.shape[<span class="number">1</span>])) <span class="comment">#选择器</span></span><br><span class="line"></span><br><span class="line">selector.fit(X_trian_vec,y_train) <span class="comment">#训练</span></span><br><span class="line"></span><br><span class="line">selected_x_trian = selector.transform(X_trian_vec) <span class="comment"># 转换x_train</span></span><br><span class="line"></span><br><span class="line">selected_x_test = selector.transform(X_test_vec) <span class="comment"># 转换x_test</span></span><br><span class="line"></span><br><span class="line">selected_x_trian.shape</span><br></pre></td></tr></table></figure>




<pre><code>(3000, 150)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">selected_x_test.shape</span><br></pre></td></tr></table></figure>




<pre><code>(1000, 150)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">lr = LogisticRegression(C=<span class="number">10</span>)</span><br><span class="line">start = time.time()</span><br><span class="line">lr.fit(selected_x_trian,y_train)</span><br><span class="line"></span><br><span class="line">y_lr = lr.predict(selected_x_test)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;lr测试集auc:&#x27;</span>,roc_auc_score(y_test,y_lr))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;lr训练集auc：&#x27;</span>, roc_auc_score(y_train, lr.predict(selected_x_trian)))</span><br><span class="line">end = time.time()</span><br><span class="line">t = end - start</span><br><span class="line">print(<span class="string">&#x27;\n&gt;&gt;&gt;算法消耗时间为：&#x27;</span>, t, <span class="string">&#x27;秒\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>lr测试集auc: 0.8542355889724311

lr训练集auc： 0.8499083078632953

&gt;&gt;&gt;算法消耗时间为： 0.04597115516662598 秒
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> validation_curve</span><br><span class="line">lr_c = LogisticRegression()</span><br><span class="line">param_range = [<span class="number">0.001</span>, <span class="number">0.01</span>, <span class="number">0.1</span>, <span class="number">1.0</span>, <span class="number">10.0</span>, <span class="number">100.0</span>]</span><br><span class="line">train_scores, test_scores = validation_curve(</span><br><span class="line">                estimator=lr_c, </span><br><span class="line">                X=selected_x_trian, </span><br><span class="line">                y=y_train, </span><br><span class="line">                param_name=<span class="string">&#x27;C&#x27;</span>, </span><br><span class="line">                param_range=param_range,</span><br><span class="line">                cv=<span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line">train_mean = np.mean(train_scores, axis=<span class="number">1</span>)</span><br><span class="line">train_std = np.std(train_scores, axis=<span class="number">1</span>)</span><br><span class="line">test_mean = np.mean(test_scores, axis=<span class="number">1</span>)</span><br><span class="line">test_std = np.std(test_scores, axis=<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">plt.plot(param_range, train_mean, </span><br><span class="line">         color=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, </span><br><span class="line">         markersize=<span class="number">5</span>, label=<span class="string">&#x27;training accuracy&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">plt.fill_between(param_range, train_mean + train_std,</span><br><span class="line">                 train_mean - train_std, alpha=<span class="number">0.15</span>,</span><br><span class="line">                 color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">plt.plot(param_range, test_mean, </span><br><span class="line">         color=<span class="string">&#x27;green&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, </span><br><span class="line">         marker=<span class="string">&#x27;s&#x27;</span>, markersize=<span class="number">5</span>, </span><br><span class="line">         label=<span class="string">&#x27;validation accuracy&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">plt.fill_between(param_range, </span><br><span class="line">                 test_mean + test_std,</span><br><span class="line">                 test_mean - test_std, </span><br><span class="line">                 alpha=<span class="number">0.15</span>, color=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">plt.grid()</span><br><span class="line">plt.xscale(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Parameter C&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Accuracy&#x27;</span>)</span><br><span class="line">plt.ylim([<span class="number">0.8</span>, <span class="number">1.0</span>])</span><br><span class="line">plt.tight_layout()</span><br><span class="line"><span class="comment"># plt.savefig(&#x27;./figures/validation_curve.png&#x27;, dpi=300)</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>c:\python38\lib\site-packages\sklearn\linear_model\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(
c:\python38\lib\site-packages\sklearn\linear_model\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(
c:\python38\lib\site-packages\sklearn\linear_model\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(
c:\python38\lib\site-packages\sklearn\linear_model\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(
c:\python38\lib\site-packages\sklearn\linear_model\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(
</code></pre>
<p><img src="/2021/04/16/%E6%90%BA%E7%A8%8B%E9%85%92%E5%BA%97%E8%AF%84%E8%AE%BA%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/output_46_1.png" alt="png"></p>
<p>lr模型的在训练集和测试集上的的auc之间差距不大，模型的泛化能力良好<br>C取10,auc达到0.85</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xgb = XGBClassifier(n_estimators=<span class="number">60</span>, max_depth=<span class="number">3</span>,) <span class="comment"># 为防止过拟合，采用较为少的树，以及决策树深度</span></span><br><span class="line">start=time.time()</span><br><span class="line">xgb.fit(selected_x_trian, y_train)</span><br><span class="line"></span><br><span class="line">y_xgb = xgb.predict(selected_x_test)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;xgboost测试集auc：&#x27;</span>, roc_auc_score(y_test, y_xgb))</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;xgboost训练集auc：&#x27;</span>, roc_auc_score(y_train, xgb.predict(selected_x_trian)))</span><br><span class="line">end = time.time()</span><br><span class="line">t = end - start</span><br><span class="line">print(<span class="string">&#x27;\n&gt;&gt;&gt;算法消耗时间为：&#x27;</span>, t, <span class="string">&#x27;秒\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>c:\python38\lib\site-packages\xgboost\sklearn.py:888: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].
  warnings.warn(label_encoder_deprecation_msg, UserWarning)


[19:32:16] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.3.0/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective &#39;binary:logistic&#39; was changed from &#39;error&#39; to &#39;logloss&#39;. Explicitly set eval_metric if you&#39;d like to restore the old behavior.
xgboost测试集auc： 0.8300250626566416

xgboost训练集auc： 0.865996110030564

&gt;&gt;&gt;算法消耗时间为： 0.2728400230407715 秒
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr.predict_proba(selected_x_test)</span><br></pre></td></tr></table></figure>




<pre><code>array([[0.60622842, 0.39377158],
       [0.06004111, 0.93995889],
       [0.6986472 , 0.3013528 ],
       ...,
       [0.53782924, 0.46217076],
       [0.02189445, 0.97810555],
       [0.41569671, 0.58430329]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=<span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.style&#x27;</span>] = <span class="string">&#x27;italic&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">16</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] =<span class="literal">False</span></span><br><span class="line">fpr_lr_4k, tpr_lr_4k, thresholds = roc_curve(y_test,</span><br><span class="line">                                 lr.predict_proba(selected_x_test)[:, <span class="number">1</span>],</span><br><span class="line">                                 pos_label=<span class="number">1</span>)</span><br><span class="line">fpr_xgb_4k, tpr_xgb_4k, thresholds = roc_curve(y_test,</span><br><span class="line">                                 xgb.predict_proba(selected_x_test)[:, <span class="number">1</span>],</span><br><span class="line">                                 pos_label=<span class="number">1</span>)   </span><br><span class="line">plt.plot(fpr_lr_4k, tpr_lr_4k,label=<span class="string">&#x27;lr&#x27;</span>)</span><br><span class="line">plt.plot(fpr_xgb_4k, tpr_xgb_4k,color=<span class="string">&#x27;red&#x27;</span>,label=<span class="string">&#x27;xgboost&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&#x27;lr和xgboost在测试集上的表现&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/16/%E6%90%BA%E7%A8%8B%E9%85%92%E5%BA%97%E8%AF%84%E8%AE%BA%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/output_51_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr_test_matx = confusion_matrix(y_test, lr.predict(selected_x_test))</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.heatmap(lr_test_matx,annot=<span class="literal">True</span>,fmt=<span class="string">&quot;d&quot;</span>,cmap=<span class="string">&quot;Blues&quot;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ac968ce160&gt;
</code></pre>
<p><img src="/2021/04/16/%E6%90%BA%E7%A8%8B%E9%85%92%E5%BA%97%E8%AF%84%E8%AE%BA%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/output_53_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br><span class="line">f1_score(y_test, lr.predict(selected_x_test))</span><br></pre></td></tr></table></figure>




<pre><code>0.8593448940269749
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xgb_test_matx = confusion_matrix(y_test, xgb.predict(selected_x_test))</span><br><span class="line">sns.heatmap(xgb_test_matx,annot=<span class="literal">True</span>,fmt=<span class="string">&quot;d&quot;</span>,cmap=<span class="string">&quot;Blues&quot;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ac95441070&gt;
</code></pre>
<p><img src="/2021/04/16/%E6%90%BA%E7%A8%8B%E9%85%92%E5%BA%97%E8%AF%84%E8%AE%BA%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/output_55_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1_score(y_test, xgb.predict(selected_x_test))</span><br></pre></td></tr></table></figure>




<pre><code>0.832517140058766
</code></pre>
<p>在欠采样中，lr的效果要远好于GBDT</p>
<h2 id="3-2-过采样"><a href="#3-2-过采样" class="headerlink" title="3.2 过采样"></a>3.2 过采样</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # 数据切分</span></span><br><span class="line"><span class="comment"># x_train, x_test, y_train, y_test = train_test_split(data_6000[&#x27;分词_02&#x27;],</span></span><br><span class="line"><span class="comment">#                                                     data_6000[&#x27;label&#x27;],</span></span><br><span class="line"><span class="comment">#                                                     random_state=1,</span></span><br><span class="line"><span class="comment">#                                                     shuffle=True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 词向量化</span></span><br><span class="line"><span class="comment"># tf_idf = TfidfVectorizer()</span></span><br><span class="line"><span class="comment"># x_trian_vec = tf_idf.fit_transform(x_train)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x_test_vec = tf_idf.transform(x_test)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x_trian_vec = x_trian_vec.astype(np.float64)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x_test_vec = x_test_vec.astype(np.float64)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 特征选择</span></span><br><span class="line"><span class="comment"># selector = SelectKBest(f_classif, k=min(150, x_trian_vec.shape[1]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># selector.fit(x_trian_vec, y_train)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># selected_x_trian = selector.transform(x_trian_vec)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># selected_x_test = selector.transform(x_test_vec)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start=time.time()</span></span><br><span class="line"><span class="comment"># lr= LogisticRegression(C=10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lr.fit(selected_x_trian, y_train)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y_hat = lr.predict(selected_x_test)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;lr测试集auc：&#x27;, roc_auc_score(y_test, y_hat))</span></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;lr训练集auc：&#x27;, roc_auc_score(y_train, lr.predict(selected_x_trian)))</span></span><br><span class="line"><span class="comment"># end = time.time()</span></span><br><span class="line"><span class="comment"># t = end - start</span></span><br><span class="line"><span class="comment"># print(&#x27;\n&gt;&gt;&gt;算法消耗时间为：&#x27;, t, &#x27;秒\n&#x27;)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start = time.time()</span></span><br><span class="line"><span class="comment"># xgb.fit(selected_x_trian, y_train)</span></span><br><span class="line"><span class="comment"># y_hat=xgb.predict(selected_x_test)  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;xgboost测试集auc：&#x27;, roc_auc_score(y_test, y_hat))</span></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;xgboost训练集auc：&#x27;, roc_auc_score(y_train, xgb.predict(selected_x_trian)))</span></span><br><span class="line"><span class="comment"># end = time.time()</span></span><br><span class="line"><span class="comment"># t = end - start</span></span><br><span class="line"><span class="comment"># print(&#x27;\n&gt;&gt;&gt;算法消耗时间为：&#x27;, t, &#x27;秒\n&#x27;)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fpr_lr_6k, tpr_lr_6k, thresholds = roc_curve(y_test,</span></span><br><span class="line"><span class="comment">#                                  lr.predict_proba(selected_x_test)[:, 1],</span></span><br><span class="line"><span class="comment">#                                  pos_label=1)</span></span><br><span class="line"><span class="comment"># fpr_xgb_6k, tpr_xgb_6k, thresholds = roc_curve(y_test,</span></span><br><span class="line"><span class="comment">#                                  xgb.predict_proba(selected_x_test)[:, 1],</span></span><br><span class="line"><span class="comment">#                                  pos_label=1)   </span></span><br><span class="line"><span class="comment"># plt.plot(fpr_lr_6k, tpr_lr_6k,label=&#x27;lr&#x27;)</span></span><br><span class="line"><span class="comment"># plt.plot(fpr_xgb_6k, tpr_xgb_6k,color=&#x27;red&#x27;,label=&#x27;xgboost&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.legend()</span></span><br><span class="line"><span class="comment"># plt.title(&#x27;lr和xgboost在测试集上的表现&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lr_test_matx = confusion_matrix(y_test, lr.predict(selected_x_test))</span></span><br><span class="line"><span class="comment"># sns.heatmap(lr_test_matx,annot=True,fmt=&quot;d&quot;,cmap=&quot;Blues&quot;)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># f1_score(y_test, lr.predict(selected_x_test))</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xgb_test_matx = confusion_matrix(y_test, xgb.predict(selected_x_test))</span></span><br><span class="line"><span class="comment"># sns.heatmap(xgb_test_matx,annot=True,fmt=&quot;d&quot;,cmap=&quot;Blues&quot;)</span></span><br><span class="line"><span class="comment"># f1_score(y_test, xgb.predict(selected_x_test))</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xgb.fit(selected_x_trian, y_train)</span><br><span class="line">xgb.apply(selected_x_trian).shape</span><br></pre></td></tr></table></figure>

<pre><code>c:\python38\lib\site-packages\xgboost\sklearn.py:888: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].
  warnings.warn(label_encoder_deprecation_msg, UserWarning)


[19:32:19] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.3.0/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective &#39;binary:logistic&#39; was changed from &#39;error&#39; to &#39;logloss&#39;. Explicitly set eval_metric if you&#39;d like to restore the old behavior.





(3000, 60)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start=time.time()</span><br><span class="line">xgb.fit(selected_x_trian, y_train)</span><br><span class="line"><span class="comment"># 一次将训练集和测试集特征组合结果转换为one_hot编码</span></span><br><span class="line">all_leaf = np.concatenate(</span><br><span class="line">    (xgb.apply(selected_x_trian), xgb.apply(selected_x_test)), axis=<span class="number">0</span>) </span><br><span class="line">enc_leaf = OneHotEncoder()</span><br><span class="line">enc_leaf.fit(all_leaf)</span><br><span class="line">all_leaf = enc_leaf.transform(all_leaf)</span><br><span class="line"><span class="comment"># all_leaf.shape</span></span><br><span class="line">x_train_all = np.hstack((all_leaf[:<span class="number">3000</span>, :].toarray(),</span><br><span class="line">                         selected_x_trian.astype(np.float64).toarray())) <span class="comment">#纵向合并</span></span><br><span class="line">lr1=LogisticRegression(C=<span class="number">0.1</span>)</span><br><span class="line">lr1.fit(x_train_all, y_train)</span><br><span class="line">print(<span class="string">&#x27;xgboost+lr训练集auc：&#x27;</span>, roc_auc_score(y_train, lr1.predict(x_train_all)))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">x_test_all = np.hstack((all_leaf[<span class="number">3000</span>:, :].toarray(),</span><br><span class="line">                        selected_x_test.astype(np.float64).toarray()))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;xgboost+lr测试集auc：&#x27;</span>, roc_auc_score(y_test, lr1.predict(x_test_all)))</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">t = end - start</span><br><span class="line">print(<span class="string">&#x27;\n&gt;&gt;&gt;算法消耗时间为：&#x27;</span>, t, <span class="string">&#x27;秒\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>c:\python38\lib\site-packages\xgboost\sklearn.py:888: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].
  warnings.warn(label_encoder_deprecation_msg, UserWarning)


[19:34:11] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.3.0/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective &#39;binary:logistic&#39; was changed from &#39;error&#39; to &#39;logloss&#39;. Explicitly set eval_metric if you&#39;d like to restore the old behavior.
xgboost+lr训练集auc： 0.8760489024729091

xgboost+lr测试集auc： 0.8432581453634086


&gt;&gt;&gt;算法消耗时间为： 0.7045953273773193 秒
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr1_test_matx = confusion_matrix(y_test, lr1.predict(x_test_all))</span><br><span class="line">sns.heatmap(lr1_test_matx,annot=<span class="literal">True</span>,fmt=<span class="string">&quot;d&quot;</span>,cmap=<span class="string">&quot;Blues&quot;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1ac986c92e0&gt;
</code></pre>
<p><img src="/2021/04/16/%E6%90%BA%E7%A8%8B%E9%85%92%E5%BA%97%E8%AF%84%E8%AE%BA%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/output_67_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1_score(y_test, lr1.predict(x_test_all))</span><br></pre></td></tr></table></figure>




<pre><code>0.8486017357762776
</code></pre>
<p>单独的lr要好于xgboodt+lr</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析实战</category>
      </categories>
      <tags>
        <tag>情感分析</tag>
        <tag>机器学习</tag>
        <tag>文本挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>淘宝用户行为分析</title>
    <url>/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="一、项目背景"><a href="#一、项目背景" class="headerlink" title="一、项目背景"></a>一、项目背景</h1><p>以淘宝APP平台为数据集，通过行业的指标对淘宝用户行为进行分析，从而探索淘宝用户的行为模式，具体指标包括：日PV和日uv分析，付费率分析，复购行为分析，漏斗流失分析</p>
<span id="more"></span>
<h1 id="二、数据的读取"><a href="#二、数据的读取" class="headerlink" title="二、数据的读取"></a>二、数据的读取</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mpl.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=<span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.style&#x27;</span>] = <span class="string">&#x27;italic&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">16</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] =<span class="literal">False</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;tianchi_mobile_recommend_train_user.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>item_id</th>
      <th>behavior_type</th>
      <th>user_geohash</th>
      <th>item_category</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>98047837</td>
      <td>232431562</td>
      <td>1</td>
      <td>NaN</td>
      <td>4245</td>
      <td>2014-12-06 02</td>
    </tr>
    <tr>
      <th>1</th>
      <td>97726136</td>
      <td>383583590</td>
      <td>1</td>
      <td>NaN</td>
      <td>5894</td>
      <td>2014-12-09 20</td>
    </tr>
    <tr>
      <th>2</th>
      <td>98607707</td>
      <td>64749712</td>
      <td>1</td>
      <td>NaN</td>
      <td>2883</td>
      <td>2014-12-18 11</td>
    </tr>
    <tr>
      <th>3</th>
      <td>98662432</td>
      <td>320593836</td>
      <td>1</td>
      <td>96nn52n</td>
      <td>6562</td>
      <td>2014-12-06 10</td>
    </tr>
    <tr>
      <th>4</th>
      <td>98145908</td>
      <td>290208520</td>
      <td>1</td>
      <td>NaN</td>
      <td>13926</td>
      <td>2014-12-16 21</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 12256906 entries, 0 to 12256905
Data columns (total 6 columns):
 #   Column         Dtype 
---  ------         ----- 
 0   user_id        int64 
 1   item_id        int64 
 2   behavior_type  int64 
 3   user_geohash   object
 4   item_category  int64 
 5   time           object
dtypes: int64(4), object(2)
memory usage: 561.1+ MB
</code></pre>
<h1 id="二、数据的清洗与处理"><a href="#二、数据的清洗与处理" class="headerlink" title="二、数据的清洗与处理"></a>二、数据的清洗与处理</h1><p>user_geohash列有空值，看一下空值的比例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;user_geohash&#x27;</span>].isnull().<span class="built_in">sum</span>()/df[<span class="string">&#x27;user_geohash&#x27;</span>].isnull().count()</span><br></pre></td></tr></table></figure>




<pre><code>0.6800104365653127
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;天&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>,expand=<span class="literal">True</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;小时&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>,expand=<span class="literal">True</span>)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>item_id</th>
      <th>behavior_type</th>
      <th>user_geohash</th>
      <th>item_category</th>
      <th>time</th>
      <th>天</th>
      <th>小时</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>98047837</td>
      <td>232431562</td>
      <td>1</td>
      <td>NaN</td>
      <td>4245</td>
      <td>2014-12-06 02</td>
      <td>2014-12-06</td>
      <td>02</td>
    </tr>
    <tr>
      <th>1</th>
      <td>97726136</td>
      <td>383583590</td>
      <td>1</td>
      <td>NaN</td>
      <td>5894</td>
      <td>2014-12-09 20</td>
      <td>2014-12-09</td>
      <td>20</td>
    </tr>
    <tr>
      <th>2</th>
      <td>98607707</td>
      <td>64749712</td>
      <td>1</td>
      <td>NaN</td>
      <td>2883</td>
      <td>2014-12-18 11</td>
      <td>2014-12-18</td>
      <td>11</td>
    </tr>
    <tr>
      <th>3</th>
      <td>98662432</td>
      <td>320593836</td>
      <td>1</td>
      <td>96nn52n</td>
      <td>6562</td>
      <td>2014-12-06 10</td>
      <td>2014-12-06</td>
      <td>10</td>
    </tr>
    <tr>
      <th>4</th>
      <td>98145908</td>
      <td>290208520</td>
      <td>1</td>
      <td>NaN</td>
      <td>13926</td>
      <td>2014-12-16 21</td>
      <td>2014-12-16</td>
      <td>21</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.columns =[<span class="string">&quot;用户ID&quot;</span>,<span class="string">&quot;商品ID&quot;</span>,<span class="string">&quot;用户行为&quot;</span>,<span class="string">&quot;地理位置&quot;</span>,<span class="string">&quot;品类ID&quot;</span>,<span class="string">&quot;日期&quot;</span>,<span class="string">&quot;天&quot;</span>,<span class="string">&quot;小时&quot;</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>用户ID</th>
      <th>商品ID</th>
      <th>用户行为</th>
      <th>地理位置</th>
      <th>品类ID</th>
      <th>日期</th>
      <th>天</th>
      <th>小时</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>98047837</td>
      <td>232431562</td>
      <td>1</td>
      <td>NaN</td>
      <td>4245</td>
      <td>2014-12-06 02</td>
      <td>2014-12-06</td>
      <td>02</td>
    </tr>
    <tr>
      <th>1</th>
      <td>97726136</td>
      <td>383583590</td>
      <td>1</td>
      <td>NaN</td>
      <td>5894</td>
      <td>2014-12-09 20</td>
      <td>2014-12-09</td>
      <td>20</td>
    </tr>
    <tr>
      <th>2</th>
      <td>98607707</td>
      <td>64749712</td>
      <td>1</td>
      <td>NaN</td>
      <td>2883</td>
      <td>2014-12-18 11</td>
      <td>2014-12-18</td>
      <td>11</td>
    </tr>
    <tr>
      <th>3</th>
      <td>98662432</td>
      <td>320593836</td>
      <td>1</td>
      <td>96nn52n</td>
      <td>6562</td>
      <td>2014-12-06 10</td>
      <td>2014-12-06</td>
      <td>10</td>
    </tr>
    <tr>
      <th>4</th>
      <td>98145908</td>
      <td>290208520</td>
      <td>1</td>
      <td>NaN</td>
      <td>13926</td>
      <td>2014-12-16 21</td>
      <td>2014-12-16</td>
      <td>21</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 12256906 entries, 0 to 12256905
Data columns (total 8 columns):
 #   Column  Dtype 
---  ------  ----- 
 0   用户ID    int64 
 1   商品ID    int64 
 2   用户行为    int64 
 3   地理位置    object
 4   品类ID    int64 
 5   日期      object
 6   天       object
 7   小时      object
dtypes: int64(4), object(4)
memory usage: 748.1+ MB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&quot;日期&quot;</span>] =pd.to_datetime(df[<span class="string">&#x27;日期&#x27;</span>])</span><br><span class="line">df[<span class="string">&#x27;天&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;天&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>用户ID</th>
      <th>商品ID</th>
      <th>用户行为</th>
      <th>地理位置</th>
      <th>品类ID</th>
      <th>日期</th>
      <th>天</th>
      <th>小时</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>98047837</td>
      <td>232431562</td>
      <td>1</td>
      <td>NaN</td>
      <td>4245</td>
      <td>2014-12-06 02:00:00</td>
      <td>2014-12-06</td>
      <td>02</td>
    </tr>
    <tr>
      <th>1</th>
      <td>97726136</td>
      <td>383583590</td>
      <td>1</td>
      <td>NaN</td>
      <td>5894</td>
      <td>2014-12-09 20:00:00</td>
      <td>2014-12-09</td>
      <td>20</td>
    </tr>
    <tr>
      <th>2</th>
      <td>98607707</td>
      <td>64749712</td>
      <td>1</td>
      <td>NaN</td>
      <td>2883</td>
      <td>2014-12-18 11:00:00</td>
      <td>2014-12-18</td>
      <td>11</td>
    </tr>
    <tr>
      <th>3</th>
      <td>98662432</td>
      <td>320593836</td>
      <td>1</td>
      <td>96nn52n</td>
      <td>6562</td>
      <td>2014-12-06 10:00:00</td>
      <td>2014-12-06</td>
      <td>10</td>
    </tr>
    <tr>
      <th>4</th>
      <td>98145908</td>
      <td>290208520</td>
      <td>1</td>
      <td>NaN</td>
      <td>13926</td>
      <td>2014-12-16 21:00:00</td>
      <td>2014-12-16</td>
      <td>21</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消pandas科学技术法</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.float_format&#x27;</span>, <span class="keyword">lambda</span> x: <span class="string">&#x27;%.3f&#x27;</span> % x)</span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>用户ID</th>
      <th>商品ID</th>
      <th>用户行为</th>
      <th>品类ID</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>12256906.000</td>
      <td>12256906.000</td>
      <td>12256906.000</td>
      <td>12256906.000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>71707324.052</td>
      <td>202308365.377</td>
      <td>1.105</td>
      <td>6846.162</td>
    </tr>
    <tr>
      <th>std</th>
      <td>41229195.091</td>
      <td>116739662.863</td>
      <td>0.457</td>
      <td>3809.922</td>
    </tr>
    <tr>
      <th>min</th>
      <td>4913.000</td>
      <td>64.000</td>
      <td>1.000</td>
      <td>2.000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>35849648.000</td>
      <td>101413047.000</td>
      <td>1.000</td>
      <td>3721.000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>72928045.000</td>
      <td>202135938.000</td>
      <td>1.000</td>
      <td>6209.000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>107377446.000</td>
      <td>303540514.000</td>
      <td>1.000</td>
      <td>10290.000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>142455899.000</td>
      <td>404562461.000</td>
      <td>4.000</td>
      <td>14080.000</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="三、总体用户行为分析"><a href="#三、总体用户行为分析" class="headerlink" title="三、总体用户行为分析"></a>三、总体用户行为分析</h1><h2 id="1-PV和UV分析"><a href="#1-PV和UV分析" class="headerlink" title="(1) PV和UV分析"></a>(1) PV和UV分析</h2><p>PV(页面浏览量):即Page View,它是指页面浏览量或点击量，页面被刷新一次计一次。<br>UV(独立访客量): 即Unique Visitor,访问网站的用户ID计一次。</p>
<h3 id="1-日访问量"><a href="#1-日访问量" class="headerlink" title="1. 日访问量"></a>1. 日访问量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_daily_pv = df.groupby(<span class="string">&#x27;天&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].count()</span><br><span class="line">df_daily_uv = df.groupby(<span class="string">&#x27;天&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].nunique()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(df_daily_pv)</span><br><span class="line">plt.title(<span class="string">u&#x27;日访问量&#x27;</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">60</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_24_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(df_daily_uv)</span><br><span class="line">plt.title(<span class="string">u&#x27;独立访客量&#x27;</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">60</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_25_0.png" alt="png"></p>
<p>结果显示：在双十二期间，pv和uv访问量均达到峰值，且pv和uv两个访问量数值差距较大</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日活跃度</span></span><br><span class="line"></span><br><span class="line">user_id_num = df[<span class="string">&#x27;用户ID&#x27;</span>].nunique()</span><br><span class="line">daily_user = df_daily_uv/user_id_num</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(daily_user)</span><br><span class="line">plt.title(<span class="string">u&#x27;注册用户日活跃率&#x27;</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">60</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_27_0.png" alt="png"></p>
<p>可以看出：淘宝用户在双十二期间日活跃度为60%-66%，在双十二当天，达到峰值77%左右。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pv_hour记录用户每小时操作数量</span></span><br><span class="line">pv_hour = df.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].count()</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(pv_hour)</span><br><span class="line">plt.title(<span class="string">u&#x27;小时访问量&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_29_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">uv_hour = df.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].nunique()</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(uv_hour)</span><br><span class="line">plt.title(<span class="string">u&#x27;小时在线人数&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_30_0.png" alt="png"></p>
<p>可以看出:pv和uv在凌晨0-5点期间波动情况相同，都呈下降趋势，凌晨5点之后，都呈上升趋势，10点之后保持平稳状态。其中，在在晚上18：00左右，pv大幅度上升，21点左右达到顶峰，相比来看uv波动不太明显，可见晚上18：00以后是淘宝用户访问app的活跃时间段。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不同行为用户pv分析</span></span><br><span class="line">df_01 =df.query(<span class="string">&#x27;用户行为==1&#x27;</span>)</span><br><span class="line">df_02 = df.query(<span class="string">&#x27;用户行为==2&#x27;</span>)</span><br><span class="line">df_03 = df.query(<span class="string">&quot;用户行为==3&quot;</span>)</span><br><span class="line">df_04 = df.query(<span class="string">&quot;用户行为==4&quot;</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">sns.lineplot(data=df_01.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].count(),label=<span class="string">&quot;点击&quot;</span>)</span><br><span class="line">sns.lineplot(data=df_02.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].count(),label=<span class="string">&quot;收藏&quot;</span>)</span><br><span class="line">sns.lineplot(data=df_03.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].count(),label=<span class="string">&quot;加入购物车&quot;</span>)</span><br><span class="line">sns.lineplot(data = df_04.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].count(),label=<span class="string">&quot;下单&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_32_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不同行为用户uv分析</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">sns.lineplot(data=df_01.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].nunique(),label=<span class="string">&quot;点击&quot;</span>)</span><br><span class="line">sns.lineplot(data=df_02.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].nunique(),label=<span class="string">&quot;收藏&quot;</span>)</span><br><span class="line">sns.lineplot(data=df_03.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].nunique(),label=<span class="string">&quot;加入购物车&quot;</span>)</span><br><span class="line">sns.lineplot(data = df_04.groupby(<span class="string">&#x27;小时&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].nunique(),label=<span class="string">&quot;下单&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_33_0.png" alt="png"></p>
<p>总体的操作量波动，与各行为操作量的波动是一致的，且各操作量排序为点击，加入购物车，收藏，购买，且晚上用户操作最为频繁</p>
<h1 id="四、用户消费行为分析"><a href="#四、用户消费行为分析" class="headerlink" title="四、用户消费行为分析"></a>四、用户消费行为分析</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户购买次数分析</span></span><br><span class="line">df_buy = df_04.groupby([<span class="string">&#x27;用户ID&#x27;</span>])[<span class="string">&#x27;用户行为&#x27;</span>].count()</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>))</span><br><span class="line">sns.distplot(df_buy)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;用户购买次数&#x27;</span>)</span><br><span class="line">plt.xlim([<span class="number">0</span>,<span class="number">100</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_36_0.png" alt="png"></p>
<p>随着购买次数的增加，购买人数在不断下降，需要重点关注十次以上的客户。</p>
<p>(1) ARPPU(Average Renvenu per pay user) 它是指每位付费用户的平均付费额度。  </p>
<ul>
<li>ARPPU = 总付费额度/付费总人数</li>
<li>由于这里没付费金额，这里用付费次数代替</li>
<li>总付费次数/用户数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">daily_user_buy = df_04.groupby(<span class="string">&#x27;天&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].nunique()</span><br><span class="line">daily_user_buy_pinci = df_04.groupby(<span class="string">&#x27;天&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].count()</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(daily_user_buy_pinci/daily_user_buy)</span><br><span class="line">plt.title(<span class="string">&#x27;ARPPU&#x27;</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">60</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_39_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(daily_user_buy_pinci/daily_user_buy).mean()</span><br></pre></td></tr></table></figure>




<pre><code>2.36844627368819
</code></pre>
<p>每日付费次数在2次左右，双十二当天人均付费次数达到将近四次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1=df[df[<span class="string">&#x27;用户行为&#x27;</span>]==<span class="number">4</span>].groupby([<span class="string">&#x27;日期&#x27;</span>])[<span class="string">&#x27;用户行为&#x27;</span>].count()  <span class="comment">#每天用户消费总次数</span></span><br><span class="line">data2=df.groupby([<span class="string">&#x27;日期&#x27;</span>])[<span class="string">&#x27;用户ID&#x27;</span>].nunique()<span class="comment">#每天活跃人数</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(data1/data2)</span><br><span class="line">plt.title(<span class="string">&#x27;活跃用户数日平均消费次数&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_42_0.png" alt="png"></p>
<p>图表显示，淘宝活跃用户（有过操作行为的用户）平均每天消费次数比较低，在0.6次左右，双十二期间达到最高值，有2左右。</p>
<p><strong>付费率 = 付费人数/活跃人数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">daily_pay_lv = daily_user_buy/df.groupby(<span class="string">&#x27;天&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].nunique()</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(daily_pay_lv)</span><br><span class="line">plt.title(<span class="string">&#x27;日付费率&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_45_0.png" alt="png"></p>
<p>图表显示：每天活跃用户人群中，大概25%的用户具有消费行为，在双十二期间消费用户人数最多。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每个时间段用户消费次数分布</span></span><br><span class="line">data1=df[df[<span class="string">&#x27;用户行为&#x27;</span>]==<span class="number">4</span>].groupby([<span class="string">&#x27;小时&#x27;</span>])[<span class="string">&#x27;用户行为&#x27;</span>].count()<span class="comment">#每个时间段的消费总次数</span></span><br><span class="line">data2=df[df[<span class="string">&#x27;用户行为&#x27;</span>]==<span class="number">4</span>].groupby([<span class="string">&#x27;小时&#x27;</span>])[<span class="string">&#x27;用户ID&#x27;</span>].nunique()<span class="comment">#每个时间段的消费人数</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(data1/data2)</span><br><span class="line">plt.title(<span class="string">&#x27;每个时间段用户消费次数&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_47_0.png" alt="png"></p>
<p>可以看出：每天凌晨过后，消费次数开始下降，早上7点左右，消费次数开始上升，10点左右开始稳定在2.6次左右，到晚上22点左右是消费高峰期。</p>
<h1 id="五、复购行为分析"><a href="#五、复购行为分析" class="headerlink" title="五、复购行为分析"></a>五、复购行为分析</h1><p>复购：一段时间内消费两次及以上的用户数<br>复购率：一段时间内消费两次及以上的用户数/消费总人数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_buy_lv = df_04.groupby(<span class="string">&#x27;用户ID&#x27;</span>)[<span class="string">&#x27;天&#x27;</span>].nunique()</span><br><span class="line">user_buy_lv</span><br></pre></td></tr></table></figure>




<pre><code>用户ID
4913         5
6118         1
7528         6
7591         9
12645        4
            ..
142376113    1
142412247    7
142430177    5
142450275    8
142455899    7
Name: 天, Length: 8886, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(user_buy_lv[user_buy_lv&gt;<span class="number">2</span>])/<span class="built_in">len</span>(user_buy_lv)</span><br></pre></td></tr></table></figure>




<pre><code>0.7451046590141797
</code></pre>
<p>可以看出，用户三十天复购率在74%以上，产品还是非常健康的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data =df_04.groupby([<span class="string">&#x27;用户ID&#x27;</span>,<span class="string">&quot;天&quot;</span>]).count().reset_index()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data =data.groupby(<span class="string">&#x27;用户ID&#x27;</span>)[<span class="string">&#x27;天&#x27;</span>].diff(<span class="number">1</span>).dropna()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = data.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.days)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure>




<pre><code>1        6
2        4
3        2
4        3
7        4
        ..
49196    2
49197    2
49198    4
49199    3
49200    1
Name: 天, Length: 40315, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">data.value_counts().plot.bar()</span><br><span class="line">plt.title(<span class="string">&#x27;复购时间间隔分布&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;复购时间间隔&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;购买人数&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_58_0.png" alt="png"></p>
<p>从图可以看出：消费次数随着消费时间间隔的增加而不断下降，在1-10天之内复购次数比较多，10天之后淘宝用户很少再进行复购，因此需要重视10天之内的淘宝用户复购行为，增加用户复购。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">sns.distplot(data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_60_0.png" alt="png"></p>
<p>总体来看，呈现逐渐下降趋势。多数淘宝用户平均复购时间集中在1-10天时间间隔内</p>
<h1 id="六、漏斗流失分析"><a href="#六、漏斗流失分析" class="headerlink" title="六、漏斗流失分析"></a>六、漏斗流失分析</h1><p>漏斗分析是一套流程式数据分析，它能够科学反映用户行为状态以及从起点到终点各阶段用户转化率情况的重要分析模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Funnel</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> CurrentConfig, NotebookType  </span><br><span class="line">CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = df.groupby(<span class="string">&#x27;用户行为&#x27;</span>)[<span class="string">&#x27;用户ID&#x27;</span>].count().reset_index()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;行为&#x27;</span>]=data[<span class="string">&#x27;用户行为&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="number">1</span>:<span class="string">&quot;点击&quot;</span>,<span class="number">2</span>:<span class="string">&quot;收藏&quot;</span>,<span class="number">3</span>:<span class="string">&quot;加入购物车&quot;</span>,<span class="number">4</span>:<span class="string">&quot;下单&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.rename(columns=&#123;<span class="string">&#x27;用户ID&#x27;</span>:<span class="string">&quot;行为次数&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;剩余客户&#x27;</span>]=data[<span class="string">&#x27;行为次数&#x27;</span>]/data[<span class="string">&#x27;行为次数&#x27;</span>].<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = (</span><br><span class="line">    Funnel()</span><br><span class="line">    .add(<span class="string">&quot;客户流失漏斗&quot;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(data[<span class="string">&#x27;行为&#x27;</span>].tolist(), data[<span class="string">&#x27;剩余客户&#x27;</span>].tolist())])</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;客户流失漏斗分析&quot;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">c.load_javascript()</span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/%E4%B8%8B%E8%BD%BD.png" alt="图像"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.render()</span><br></pre></td></tr></table></figure>




<h1 id="七、用户行为与商品种类关系分析"><a href="#七、用户行为与商品种类关系分析" class="headerlink" title="七、用户行为与商品种类关系分析"></a>七、用户行为与商品种类关系分析</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data =pd.pivot_table(data=df,index=<span class="string">&#x27;品类ID&#x27;</span>,columns=<span class="string">&quot;用户行为&quot;</span>,values=<span class="string">&quot;商品ID&quot;</span>,aggfunc=<span class="string">&quot;count&quot;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.columns=[<span class="string">&#x27;点击&#x27;</span>,<span class="string">&quot;收藏&quot;</span>,<span class="string">&quot;加入购物车&quot;</span>,<span class="string">&quot;下单&quot;</span>]</span><br><span class="line">data.fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>点击</th>
      <th>收藏</th>
      <th>加入购物车</th>
      <th>下单</th>
    </tr>
    <tr>
      <th>品类ID</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2</th>
      <td>3.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>6</th>
      <td>10.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>8</th>
      <td>976.000</td>
      <td>9.000</td>
      <td>4.000</td>
      <td>4.000</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>14075</th>
      <td>44.000</td>
      <td>0.000</td>
      <td>3.000</td>
      <td>1.000</td>
    </tr>
    <tr>
      <th>14076</th>
      <td>28.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>14078</th>
      <td>60.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>14079</th>
      <td>93007.000</td>
      <td>2189.000</td>
      <td>2515.000</td>
      <td>479.000</td>
    </tr>
    <tr>
      <th>14080</th>
      <td>86.000</td>
      <td>3.000</td>
      <td>1.000</td>
      <td>0.000</td>
    </tr>
  </tbody>
</table>
<p>8916 rows × 4 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;点击_下单转化率&#x27;</span>] = data[<span class="string">&#x27;下单&#x27;</span>]/data[<span class="string">&#x27;点击&#x27;</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.fillna(<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(data[<span class="string">&#x27;点击_下单转化率&#x27;</span>]&gt;<span class="number">1</span>).<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>0
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>点击</th>
      <th>收藏</th>
      <th>加入购物车</th>
      <th>下单</th>
      <th>点击_下单转化率</th>
    </tr>
    <tr>
      <th>品类ID</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2</th>
      <td>3.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>6</th>
      <td>10.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>8</th>
      <td>976.000</td>
      <td>9.000</td>
      <td>4.000</td>
      <td>4.000</td>
      <td>0.004</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.sort_values(by=<span class="string">&quot;点击_下单转化率&quot;</span>,ascending=<span class="literal">False</span>)[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>点击</th>
      <th>收藏</th>
      <th>加入购物车</th>
      <th>下单</th>
      <th>点击_下单转化率</th>
    </tr>
    <tr>
      <th>品类ID</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4527</th>
      <td>2.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>2.000</td>
      <td>1.000</td>
    </tr>
    <tr>
      <th>7628</th>
      <td>1.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>1.000</td>
    </tr>
    <tr>
      <th>12895</th>
      <td>2.000</td>
      <td>1.000</td>
      <td>0.000</td>
      <td>2.000</td>
      <td>1.000</td>
    </tr>
    <tr>
      <th>8680</th>
      <td>2.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>1.000</td>
      <td>0.500</td>
    </tr>
    <tr>
      <th>7912</th>
      <td>2.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>1.000</td>
      <td>0.500</td>
    </tr>
    <tr>
      <th>5105</th>
      <td>2.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>1.000</td>
      <td>0.500</td>
    </tr>
    <tr>
      <th>5069</th>
      <td>2.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>0.500</td>
    </tr>
    <tr>
      <th>13900</th>
      <td>2.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>1.000</td>
      <td>0.500</td>
    </tr>
    <tr>
      <th>11336</th>
      <td>2.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>1.000</td>
      <td>0.500</td>
    </tr>
    <tr>
      <th>129</th>
      <td>2.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>1.000</td>
      <td>0.500</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">sns.distplot(data[<span class="string">&#x27;点击_下单转化率&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;点击_下单转化率&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_79_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.query(<span class="string">&#x27;点击_下单转化率&gt;0&#x27;</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>点击</th>
      <th>收藏</th>
      <th>加入购物车</th>
      <th>下单</th>
      <th>点击_下单转化率</th>
    </tr>
    <tr>
      <th>品类ID</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>8</th>
      <td>976.000</td>
      <td>9.000</td>
      <td>4.000</td>
      <td>4.000</td>
      <td>0.004</td>
    </tr>
    <tr>
      <th>10</th>
      <td>212.000</td>
      <td>3.000</td>
      <td>9.000</td>
      <td>4.000</td>
      <td>0.019</td>
    </tr>
    <tr>
      <th>11</th>
      <td>8818.000</td>
      <td>94.000</td>
      <td>78.000</td>
      <td>5.000</td>
      <td>0.001</td>
    </tr>
    <tr>
      <th>12</th>
      <td>194.000</td>
      <td>8.000</td>
      <td>14.000</td>
      <td>5.000</td>
      <td>0.026</td>
    </tr>
    <tr>
      <th>13</th>
      <td>99.000</td>
      <td>6.000</td>
      <td>2.000</td>
      <td>6.000</td>
      <td>0.061</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>14066</th>
      <td>184.000</td>
      <td>9.000</td>
      <td>7.000</td>
      <td>2.000</td>
      <td>0.011</td>
    </tr>
    <tr>
      <th>14068</th>
      <td>32.000</td>
      <td>0.000</td>
      <td>1.000</td>
      <td>2.000</td>
      <td>0.062</td>
    </tr>
    <tr>
      <th>14073</th>
      <td>189.000</td>
      <td>1.000</td>
      <td>48.000</td>
      <td>17.000</td>
      <td>0.090</td>
    </tr>
    <tr>
      <th>14075</th>
      <td>44.000</td>
      <td>0.000</td>
      <td>3.000</td>
      <td>1.000</td>
      <td>0.023</td>
    </tr>
    <tr>
      <th>14079</th>
      <td>93007.000</td>
      <td>2189.000</td>
      <td>2515.000</td>
      <td>479.000</td>
      <td>0.005</td>
    </tr>
  </tbody>
</table>
<p>4662 rows × 5 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">sns.distplot(data.query(<span class="string">&#x27;点击_下单转化率&gt;0&#x27;</span>))</span><br><span class="line">plt.title(<span class="string">&#x27;点击_下单转化率&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/03/16/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/output_81_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将点击-购买转化率分三类查看各类占比例</span></span><br><span class="line">data_rate=pd.cut(data[<span class="string">&#x27;点击_下单转化率&#x27;</span>],[<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0.4</span>,<span class="number">1</span>]).value_counts()</span><br><span class="line">data_rate/data_rate.<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>(0.0, 0.1]   0.961
(0.1, 0.4]   0.036
(0.4, 1.0]   0.003
Name: 点击_下单转化率, dtype: float64
</code></pre>
<p>转化率在0.1以下的商品占据了96%，在转化率在0.1-0.4的商品占据了3.6%。</p>
<h1 id="八、二八理论分析"><a href="#八、二八理论分析" class="headerlink" title="八、二八理论分析"></a>八、二八理论分析</h1><p>二八定理：市场上20%的商品占据了80%的销售额</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>点击</th>
      <th>收藏</th>
      <th>加入购物车</th>
      <th>下单</th>
      <th>点击_下单转化率</th>
    </tr>
    <tr>
      <th>品类ID</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2</th>
      <td>3.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>6</th>
      <td>10.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>8</th>
      <td>976.000</td>
      <td>9.000</td>
      <td>4.000</td>
      <td>4.000</td>
      <td>0.004</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value_8 = data[<span class="string">&#x27;下单&#x27;</span>].<span class="built_in">sum</span>()*<span class="number">0.8</span></span><br><span class="line">data =data.sort_values(<span class="string">&#x27;下单&#x27;</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">data[<span class="string">&#x27;累计下单量&#x27;</span>] = data[<span class="string">&#x27;下单&#x27;</span>].cumsum()</span><br><span class="line">data[<span class="string">&#x27;比列&#x27;</span>] = data[<span class="string">&#x27;累计下单量&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="string">&quot;后80%商品&quot;</span> <span class="keyword">if</span> x&gt;value_8 <span class="keyword">else</span> <span class="string">&quot;前20%的商品&quot;</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>点击</th>
      <th>收藏</th>
      <th>加入购物车</th>
      <th>下单</th>
      <th>点击_下单转化率</th>
      <th>累计下单量</th>
      <th>比列</th>
    </tr>
    <tr>
      <th>品类ID</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>6344</th>
      <td>85369.000</td>
      <td>1660.000</td>
      <td>3822.000</td>
      <td>2208.000</td>
      <td>0.026</td>
      <td>2208.000</td>
      <td>前20%的商品</td>
    </tr>
    <tr>
      <th>1863</th>
      <td>371738.000</td>
      <td>10200.000</td>
      <td>9309.000</td>
      <td>2000.000</td>
      <td>0.005</td>
      <td>4208.000</td>
      <td>前20%的商品</td>
    </tr>
    <tr>
      <th>5232</th>
      <td>135506.000</td>
      <td>2597.000</td>
      <td>4486.000</td>
      <td>1611.000</td>
      <td>0.012</td>
      <td>5819.000</td>
      <td>前20%的商品</td>
    </tr>
    <tr>
      <th>6977</th>
      <td>22806.000</td>
      <td>273.000</td>
      <td>2007.000</td>
      <td>1324.000</td>
      <td>0.058</td>
      <td>7143.000</td>
      <td>前20%的商品</td>
    </tr>
    <tr>
      <th>8877</th>
      <td>63396.000</td>
      <td>1247.000</td>
      <td>1974.000</td>
      <td>1072.000</td>
      <td>0.017</td>
      <td>8215.000</td>
      <td>前20%的商品</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>6299</th>
      <td>25.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>120205.000</td>
      <td>后80%商品</td>
    </tr>
    <tr>
      <th>6297</th>
      <td>1.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>120205.000</td>
      <td>后80%商品</td>
    </tr>
    <tr>
      <th>6291</th>
      <td>4.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>120205.000</td>
      <td>后80%商品</td>
    </tr>
    <tr>
      <th>6290</th>
      <td>2.000</td>
      <td>0.000</td>
      <td>2.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>120205.000</td>
      <td>后80%商品</td>
    </tr>
    <tr>
      <th>14080</th>
      <td>86.000</td>
      <td>3.000</td>
      <td>1.000</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>120205.000</td>
      <td>后80%商品</td>
    </tr>
  </tbody>
</table>
<p>8916 rows × 7 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;比列&#x27;</span>].value_counts()/<span class="number">8916</span></span><br></pre></td></tr></table></figure>




<pre><code>后80%商品    0.919
前20%的商品   0.081
Name: 比列, dtype: float64
</code></pre>
<p>下单量的80%，由8.1%的商品种类承包，需要注意这些商品的库存及时补给</p>
]]></content>
      <categories>
        <category>数据分析实战</category>
      </categories>
  </entry>
  <entry>
    <title>无监督对客户群体细分</title>
    <url>/2021/04/16/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%BE%A4%E4%BD%93%E7%BB%86%E5%88%86/</url>
    <content><![CDATA[<h1 id="一、数据背景"><a href="#一、数据背景" class="headerlink" title="一、数据背景"></a>一、数据背景</h1><p>数据背景：数据为某商场会员基本信息，包括CustomerID（客户ID），Gender（性别），Age（年龄），Annual Income (k$)（年收入）和Spending Score (1-100)（消费得分：根据顾客消费行为，例如客户行为和购买数据商场的评分），通过已有信息对客户进行细化分类，以便营销运营团队更好的制定策略。</p>
<p>数据来源：<a href="https://www.kaggle.com/vjchoudhary7/customer-segmentation-tutorial-in-python">kaggle</a></p>
<span id="more"></span>
<h1 id="二、数据的读取及预处理"><a href="#二、数据的读取及预处理" class="headerlink" title="二、数据的读取及预处理"></a>二、数据的读取及预处理</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mpl.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=<span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.style&#x27;</span>] = <span class="string">&#x27;italic&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">16</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] =<span class="literal">False</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cust_df = pd.read_csv(<span class="string">&#x27;Mall_Customers.csv&#x27;</span>)</span><br><span class="line">cust_df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CustomerID</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Annual Income (k$)</th>
      <th>Spending Score (1-100)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Male</td>
      <td>19</td>
      <td>15</td>
      <td>39</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Male</td>
      <td>21</td>
      <td>15</td>
      <td>81</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Female</td>
      <td>20</td>
      <td>16</td>
      <td>6</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Female</td>
      <td>23</td>
      <td>16</td>
      <td>77</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>Female</td>
      <td>31</td>
      <td>17</td>
      <td>40</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cust_df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 200 entries, 0 to 199
Data columns (total 5 columns):
 #   Column                  Non-Null Count  Dtype 
---  ------                  --------------  ----- 
 0   CustomerID              200 non-null    int64 
 1   Gender                  200 non-null    object
 2   Age                     200 non-null    int64 
 3   Annual Income (k$)      200 non-null    int64 
 4   Spending Score (1-100)  200 non-null    int64 
dtypes: int64(4), object(1)
memory usage: 7.9+ KB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cust_df.duplicated().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>0
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cust_df[<span class="string">&#x27;Gender&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>




<pre><code>Female    112
Male       88
Name: Gender, dtype: int64
</code></pre>
<p><em><strong>没有空值，没有重复数据</strong></em></p>
<h1 id="三、数据可视化"><a href="#三、数据可视化" class="headerlink" title="三、数据可视化"></a>三、数据可视化</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.pairplot(cust_df)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;seaborn.axisgrid.PairGrid at 0x24eaf217670&gt;
</code></pre>
<p><img src="/2021/04/16/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%BE%A4%E4%BD%93%E7%BB%86%E5%88%86/output_12_1.png" alt="png"></p>
<p>客户ID与年收入存在明显的正相关关系</p>
<h2 id="3-2-不同性别在个变量之间的关系"><a href="#3-2-不同性别在个变量之间的关系" class="headerlink" title="3.2 不同性别在个变量之间的关系"></a>3.2 不同性别在个变量之间的关系</h2><ul>
<li>不同性别，年龄与收入之间的关系</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">sns.scatterplot(data=cust_df,x=<span class="string">&quot;Age&quot;</span>,y=<span class="string">&quot;Annual Income (k$)&quot;</span>,hue=<span class="string">&#x27;Gender&#x27;</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/16/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%BE%A4%E4%BD%93%E7%BB%86%E5%88%86/output_16_0.png" alt="png"></p>
<ul>
<li>不同性别，年龄与积分之间的关系</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">sns.scatterplot(data=cust_df,x=<span class="string">&quot;Age&quot;</span>,y=<span class="string">&quot;Spending Score (1-100)&quot;</span>,hue=<span class="string">&#x27;Gender&#x27;</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/16/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%BE%A4%E4%BD%93%E7%BB%86%E5%88%86/output_18_0.png" alt="png"></p>
<ul>
<li><ul>
<li>不同性别，年收入与积分之间的关系</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">sns.scatterplot(data=cust_df,x=<span class="string">&quot;Annual Income (k$)&quot;</span>,y=<span class="string">&quot;Spending Score (1-100)&quot;</span>,hue=<span class="string">&#x27;Gender&#x27;</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/16/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%BE%A4%E4%BD%93%E7%BB%86%E5%88%86/output_20_0.png" alt="png"></p>
<h1 id="四、K-means聚类分析"><a href="#四、K-means聚类分析" class="headerlink" title="四、K-means聚类分析"></a>四、K-means聚类分析</h1><h2 id="3-1-寻找最佳聚类个数——The-Elbow-Method手肘法则"><a href="#3-1-寻找最佳聚类个数——The-Elbow-Method手肘法则" class="headerlink" title="3.1 寻找最佳聚类个数——The Elbow Method手肘法则"></a>3.1 寻找最佳聚类个数——The Elbow Method手肘法则</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cust_values = cust_df[[<span class="string">&#x27;Age&#x27;</span> , <span class="string">&#x27;Annual Income (k$)&#x27;</span> ,<span class="string">&#x27;Spending Score (1-100)&#x27;</span>]].values</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inertia = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    model = KMeans(n_clusters=i,init=<span class="string">&#x27;k-means++&#x27;</span>,max_iter=<span class="number">300</span>,n_init=<span class="number">10</span>,random_state=<span class="number">0</span>)</span><br><span class="line">    model.fit(cust_values)</span><br><span class="line">    inertia.append(model.inertia_)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>),inertia,<span class="string">&#x27;o--&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x24eb21f7700&gt;]
</code></pre>
<p><img src="/2021/04/16/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%BE%A4%E4%BD%93%E7%BB%86%E5%88%86/output_25_1.png" alt="png"></p>
<p>利用手肘法，通过图形发现，拐点在6这个位置，即最佳聚类个数为6</p>
<h2 id="3-2-降维"><a href="#3-2-降维" class="headerlink" title="3.2 降维"></a>3.2 降维</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cluster = KMeans(n_clusters=<span class="number">6</span>)</span><br><span class="line">cluster.fit(cust_values)</span><br></pre></td></tr></table></figure>




<pre><code>KMeans(n_clusters=6)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> manifold </span><br><span class="line">tsne = manifold.TSNE()   <span class="comment">#将关系数据降维二维</span></span><br><span class="line">tsne_data = tsne.fit_transform(cust_values)</span><br><span class="line">tsne_df = pd.DataFrame(tsne_data,columns=[<span class="string">&#x27;col1&#x27;</span>,<span class="string">&#x27;col2&#x27;</span>])</span><br><span class="line">tsne_df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>col1</th>
      <th>col2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>-1.265233</td>
      <td>-9.259246</td>
    </tr>
    <tr>
      <th>1</th>
      <td>5.900995</td>
      <td>-5.130991</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-1.991404</td>
      <td>-11.693021</td>
    </tr>
    <tr>
      <th>3</th>
      <td>5.524348</td>
      <td>-4.871716</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-1.658740</td>
      <td>-9.383090</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>195</th>
      <td>7.973668</td>
      <td>17.204592</td>
    </tr>
    <tr>
      <th>196</th>
      <td>-5.796427</td>
      <td>7.081119</td>
    </tr>
    <tr>
      <th>197</th>
      <td>7.431481</td>
      <td>17.882927</td>
    </tr>
    <tr>
      <th>198</th>
      <td>-5.909324</td>
      <td>7.454984</td>
    </tr>
    <tr>
      <th>199</th>
      <td>7.340686</td>
      <td>18.012049</td>
    </tr>
  </tbody>
</table>
<p>200 rows × 2 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tsne_df[<span class="string">&#x27;label&#x27;</span>] = cluster.predict(cust_values)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.scatterplot(data=tsne_df,x=<span class="string">&#x27;col1&#x27;</span>,y=<span class="string">&#x27;col2&#x27;</span>,hue=<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/16/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%BE%A4%E4%BD%93%E7%BB%86%E5%88%86/output_31_0.png" alt="png"></p>
<p>通过降维，将三维立体图降维为平面图，上图6个不同颜色代表6个不同的人群，因为K-Means是无监督学习，主要负责把特征比较明显的用户归为一类，具体每一类分别代表什么群体，需要我们自己进行分析，下面会有讲述。</p>
<h2 id="3-3-聚类效果评估"><a href="#3-3-聚类效果评估" class="headerlink" title="3.3 聚类效果评估"></a>3.3 聚类效果评估</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">score = metrics.silhouette_score(cust_values,tsne_df[<span class="string">&#x27;label&#x27;</span>])</span><br><span class="line">print(<span class="string">&#x27;聚类个数为6时，轮廓函数:&#x27;</span> , score)</span><br></pre></td></tr></table></figure>

<pre><code>聚类个数为6时，轮廓函数: 0.4523443947724053
</code></pre>
<p>轮廓函数为：0.45，聚类效果较好。</p>
<p>PS：轮廓系数取值为[-1, 1]，其值越大越好，且当值为负时，表明样本被分配到错误的簇中，聚类结果不可接受。对于接近0的结果，则表明聚类结果有重叠的情况。</p>
<h2 id="3-4-聚类人群"><a href="#3-4-聚类人群" class="headerlink" title="3.4 聚类人群"></a>3.4 聚类人群</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result =pd.DataFrame(cluster.cluster_centers_,columns=[<span class="string">&#x27;Age&#x27;</span> , <span class="string">&#x27;Annual Income (k$)&#x27;</span> ,<span class="string">&#x27;Spending Score (1-100)&#x27;</span>])</span><br><span class="line">result.plot(kind=<span class="string">&#x27;bar&#x27;</span>,color=[<span class="string">&#x27;C1&#x27;</span>,<span class="string">&#x27;C2&#x27;</span>,<span class="string">&#x27;C3&#x27;</span>],clip_on=<span class="literal">False</span>,alpha = <span class="number">0.5</span>,figsize=(<span class="number">20</span>,<span class="number">8</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<pre><code>&lt;Figure size 720x576 with 0 Axes&gt;
</code></pre>
<p><img src="/2021/04/16/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%BE%A4%E4%BD%93%E7%BB%86%E5%88%86/output_37_1.png" alt="png"></p>
<ul>
<li><p>0组：平均年龄55岁左右，收入55K$左右，消费50积分(属于重要保持人群：以中老年为主，收入和消费居中)   </p>
</li>
<li><p>1组：平均年龄45岁左右，收入在90k$左右，消费20积分（属于谨慎消费人群：以中年为主，收入很高，但消费很低） </p>
</li>
<li><p>2组：平均年龄在25岁左右，收入在69K$左右，消费50积分（属于重要发展人群：青年为主，收入消费得分居中，潜力巨大） </p>
</li>
<li><p>3组：平均年龄在5哦左右，收入消费均偏低（一般价值人群）</p>
</li>
<li><p>4组：平均年龄在30岁左右，收入&gt;80K$，消费&gt;80积分(重要价值人群：中年为主，收入和消费得分都很高，属于最优客户群体)</p>
</li>
<li><p>5组：平均年龄在25岁左右，收入25K$左右，消费积分&gt;80(冲动消费人群：青年为主，收入一般但消费得分较高）</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cust_df[<span class="string">&#x27;label&#x27;</span>] = cluster.labels_</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cust_df[<span class="string">&#x27;label&#x27;</span>].value_counts(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0    0.225
4    0.195
2    0.190
1    0.175
5    0.110
3    0.105
Name: label, dtype: float64
</code></pre>
<p>结果得到，2组（重要保持客户）人数最多，占比22.5%；5组（一般价值客户）人数最少，占比10.5%。</p>
<p><strong>至此我们已经把所有客户细分为6类，针对不同客户特征，可以制定不同的营销运营策略，使运营效果最大化。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析实战</category>
      </categories>
      <tags>
        <tag>客户分群</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>基于RFM模型的电商用户价值挖掘</title>
    <url>/2021/04/16/%E5%9F%BA%E4%BA%8ERFM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E4%BB%B7%E5%80%BC%E6%8C%96%E6%8E%98/</url>
    <content><![CDATA[<h1 id="一、数据的导入与查看"><a href="#一、数据的导入与查看" class="headerlink" title="一、数据的导入与查看"></a>一、数据的导入与查看</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&#x27;电商用户价值挖掘.xlsx&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>品牌名称</th>
      <th>买家昵称</th>
      <th>付款日期</th>
      <th>订单状态</th>
      <th>实付金额</th>
      <th>邮费</th>
      <th>省份</th>
      <th>城市</th>
      <th>购买数量</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>数据不吹牛</td>
      <td>叫我李2</td>
      <td>2019-01-01 00:17:59</td>
      <td>交易成功</td>
      <td>186</td>
      <td>6</td>
      <td>上海</td>
      <td>上海市</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>数据不吹牛</td>
      <td>0cyb1992</td>
      <td>2019-01-01 00:59:54</td>
      <td>交易成功</td>
      <td>145</td>
      <td>0</td>
      <td>广东省</td>
      <td>广州市</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>数据不吹牛</td>
      <td>萝污萌莉</td>
      <td>2019-01-01 07:48:48</td>
      <td>交易成功</td>
      <td>194</td>
      <td>8</td>
      <td>山东省</td>
      <td>东营市</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>数据不吹牛</td>
      <td>atblovemyy</td>
      <td>2019-01-01 09:15:49</td>
      <td>付款以后用户退款成功，交易自动关闭</td>
      <td>84</td>
      <td>0</td>
      <td>江苏省</td>
      <td>镇江市</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>数据不吹牛</td>
      <td>小星期鱼</td>
      <td>2019-01-01 09:59:33</td>
      <td>付款以后用户退款成功，交易自动关闭</td>
      <td>74</td>
      <td>0</td>
      <td>上海</td>
      <td>上海市</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.tail()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>品牌名称</th>
      <th>买家昵称</th>
      <th>付款日期</th>
      <th>订单状态</th>
      <th>实付金额</th>
      <th>邮费</th>
      <th>省份</th>
      <th>城市</th>
      <th>购买数量</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>28828</th>
      <td>数据不吹牛</td>
      <td>nhuliy5</td>
      <td>2019-06-30 22:22:09.000</td>
      <td>交易成功</td>
      <td>144</td>
      <td>0</td>
      <td>湖南省</td>
      <td>长沙市</td>
      <td>1</td>
    </tr>
    <tr>
      <th>28829</th>
      <td>数据不吹牛</td>
      <td>2ganlin7</td>
      <td>2019-06-30 22:33:42.773</td>
      <td>交易成功</td>
      <td>216</td>
      <td>0</td>
      <td>安徽省</td>
      <td>滁州市</td>
      <td>1</td>
    </tr>
    <tr>
      <th>28830</th>
      <td>数据不吹牛</td>
      <td>点大a</td>
      <td>2019-06-30 22:36:52.890</td>
      <td>交易成功</td>
      <td>231</td>
      <td>0</td>
      <td>湖北省</td>
      <td>武汉市</td>
      <td>1</td>
    </tr>
    <tr>
      <th>28831</th>
      <td>数据不吹牛</td>
      <td>8陈爷558989</td>
      <td>2019-06-30 22:44:38.392</td>
      <td>交易成功</td>
      <td>99</td>
      <td>0</td>
      <td>广东省</td>
      <td>深圳市</td>
      <td>2</td>
    </tr>
    <tr>
      <th>28832</th>
      <td>数据不吹牛</td>
      <td>gxienue_ya</td>
      <td>2019-06-30 22:46:22.511</td>
      <td>交易成功</td>
      <td>301</td>
      <td>0</td>
      <td>陕西省</td>
      <td>西安市</td>
      <td>7</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;品牌名称&#x27;</span>].unique()</span><br></pre></td></tr></table></figure>




<pre><code>array([&#39;数据不吹牛&#39;], dtype=object)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 28833 entries, 0 to 28832
Data columns (total 9 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   品牌名称    28833 non-null  object        
 1   买家昵称    28833 non-null  object        
 2   付款日期    28833 non-null  datetime64[ns]
 3   订单状态    28833 non-null  object        
 4   实付金额    28833 non-null  int64         
 5   邮费      28833 non-null  int64         
 6   省份      28833 non-null  object        
 7   城市      28832 non-null  object        
 8   购买数量    28833 non-null  int64         
dtypes: datetime64[ns](1), int64(3), object(5)
memory usage: 2.0+ MB
</code></pre>
<p><strong>城市中有一行空值记录</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;邮费&#x27;</span>].unique()</span><br></pre></td></tr></table></figure>




<pre><code>array([ 6,  0,  8, 10, 13, 18], dtype=int64)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>实付金额</th>
      <th>邮费</th>
      <th>购买数量</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>28833.000000</td>
      <td>28833.000000</td>
      <td>28833.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>126.266570</td>
      <td>0.245240</td>
      <td>1.510942</td>
    </tr>
    <tr>
      <th>std</th>
      <td>73.771696</td>
      <td>1.386435</td>
      <td>1.483478</td>
    </tr>
    <tr>
      <th>min</th>
      <td>30.000000</td>
      <td>0.000000</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>72.000000</td>
      <td>0.000000</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>115.000000</td>
      <td>0.000000</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>178.000000</td>
      <td>0.000000</td>
      <td>2.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>4225.000000</td>
      <td>18.000000</td>
      <td>100.000000</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="二、数据的清洗与处理"><a href="#二、数据的清洗与处理" class="headerlink" title="二、数据的清洗与处理"></a>二、数据的清洗与处理</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[df[<span class="string">&#x27;城市&#x27;</span>].isnull()]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>品牌名称</th>
      <th>买家昵称</th>
      <th>付款日期</th>
      <th>订单状态</th>
      <th>实付金额</th>
      <th>邮费</th>
      <th>省份</th>
      <th>城市</th>
      <th>购买数量</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>15410</th>
      <td>数据不吹牛</td>
      <td>6l8190485</td>
      <td>2019-03-20 17:02:22</td>
      <td>交易成功</td>
      <td>123</td>
      <td>0</td>
      <td>新疆维吾尔自治区</td>
      <td>NaN</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.duplicated().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>1
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除重复值</span></span><br><span class="line">df.drop_duplicates(inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.columns</span><br></pre></td></tr></table></figure>




<pre><code>Index([&#39;品牌名称&#39;, &#39;买家昵称&#39;, &#39;付款日期&#39;, &#39;订单状态&#39;, &#39;实付金额&#39;, &#39;邮费&#39;, &#39;省份&#39;, &#39;城市&#39;, &#39;购买数量&#39;], dtype=&#39;object&#39;)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;订单状态&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>




<pre><code>交易成功                 27792
付款以后用户退款成功，交易自动关闭     1040
Name: 订单状态, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df.query(<span class="string">&#x27;订单状态==&quot;交易成功&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Int64Index: 27792 entries, 0 to 28832
Data columns (total 9 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   品牌名称    27792 non-null  object        
 1   买家昵称    27792 non-null  object        
 2   付款日期    27792 non-null  datetime64[ns]
 3   订单状态    27792 non-null  object        
 4   实付金额    27792 non-null  int64         
 5   邮费      27792 non-null  int64         
 6   省份      27792 non-null  object        
 7   城市      27791 non-null  object        
 8   购买数量    27792 non-null  int64         
dtypes: datetime64[ns](1), int64(3), object(5)
memory usage: 2.1+ MB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[:,<span class="string">&#x27;R&#x27;</span>] = (df[<span class="string">&#x27;付款日期&#x27;</span>].<span class="built_in">max</span>()-df[<span class="string">&#x27;付款日期&#x27;</span>]).dt.days</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>品牌名称</th>
      <th>买家昵称</th>
      <th>付款日期</th>
      <th>订单状态</th>
      <th>实付金额</th>
      <th>邮费</th>
      <th>省份</th>
      <th>城市</th>
      <th>购买数量</th>
      <th>R</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>数据不吹牛</td>
      <td>叫我李2</td>
      <td>2019-01-01 00:17:59.000</td>
      <td>交易成功</td>
      <td>186</td>
      <td>6</td>
      <td>上海</td>
      <td>上海市</td>
      <td>1</td>
      <td>180</td>
    </tr>
    <tr>
      <th>1</th>
      <td>数据不吹牛</td>
      <td>0cyb1992</td>
      <td>2019-01-01 00:59:54.000</td>
      <td>交易成功</td>
      <td>145</td>
      <td>0</td>
      <td>广东省</td>
      <td>广州市</td>
      <td>1</td>
      <td>180</td>
    </tr>
    <tr>
      <th>2</th>
      <td>数据不吹牛</td>
      <td>萝污萌莉</td>
      <td>2019-01-01 07:48:48.000</td>
      <td>交易成功</td>
      <td>194</td>
      <td>8</td>
      <td>山东省</td>
      <td>东营市</td>
      <td>1</td>
      <td>180</td>
    </tr>
    <tr>
      <th>5</th>
      <td>数据不吹牛</td>
      <td>重碎叠</td>
      <td>2019-01-01 10:00:07.000</td>
      <td>交易成功</td>
      <td>197</td>
      <td>0</td>
      <td>江苏省</td>
      <td>南京市</td>
      <td>1</td>
      <td>180</td>
    </tr>
    <tr>
      <th>6</th>
      <td>数据不吹牛</td>
      <td>iho_jann</td>
      <td>2019-01-01 10:00:08.000</td>
      <td>交易成功</td>
      <td>168</td>
      <td>0</td>
      <td>广东省</td>
      <td>广州市</td>
      <td>1</td>
      <td>180</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>28828</th>
      <td>数据不吹牛</td>
      <td>nhuliy5</td>
      <td>2019-06-30 22:22:09.000</td>
      <td>交易成功</td>
      <td>144</td>
      <td>0</td>
      <td>湖南省</td>
      <td>长沙市</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>28829</th>
      <td>数据不吹牛</td>
      <td>2ganlin7</td>
      <td>2019-06-30 22:33:42.773</td>
      <td>交易成功</td>
      <td>216</td>
      <td>0</td>
      <td>安徽省</td>
      <td>滁州市</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>28830</th>
      <td>数据不吹牛</td>
      <td>点大a</td>
      <td>2019-06-30 22:36:52.890</td>
      <td>交易成功</td>
      <td>231</td>
      <td>0</td>
      <td>湖北省</td>
      <td>武汉市</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>28831</th>
      <td>数据不吹牛</td>
      <td>8陈爷558989</td>
      <td>2019-06-30 22:44:38.392</td>
      <td>交易成功</td>
      <td>99</td>
      <td>0</td>
      <td>广东省</td>
      <td>深圳市</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>28832</th>
      <td>数据不吹牛</td>
      <td>gxienue_ya</td>
      <td>2019-06-30 22:46:22.511</td>
      <td>交易成功</td>
      <td>301</td>
      <td>0</td>
      <td>陕西省</td>
      <td>西安市</td>
      <td>7</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>27792 rows × 10 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R = df.groupby(<span class="string">&#x27;买家昵称&#x27;</span>)[<span class="string">&#x27;R&#x27;</span>].<span class="built_in">min</span>().reset_index()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构造F值，用户在交易时间内，交易的次数</span></span><br><span class="line">F = df.groupby(<span class="string">&#x27;买家昵称&#x27;</span>)[<span class="string">&#x27;订单状态&#x27;</span>].count().reset_index()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">F.rename(columns=&#123;<span class="string">&#x27;订单状态&#x27;</span>:<span class="string">&quot;F&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">F.sort_values(<span class="string">&quot;F&quot;</span>,ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>F</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>20900</th>
      <td>小kk铺</td>
      <td>15</td>
    </tr>
    <tr>
      <th>19515</th>
      <td>凯d歌</td>
      <td>7</td>
    </tr>
    <tr>
      <th>10772</th>
      <td>9engineleun1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>20084</th>
      <td>圆鹿</td>
      <td>5</td>
    </tr>
    <tr>
      <th>15626</th>
      <td>nilarialg</td>
      <td>5</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>8799</th>
      <td>6树袋熊6</td>
      <td>1</td>
    </tr>
    <tr>
      <th>8798</th>
      <td>6柠檬可6</td>
      <td>1</td>
    </tr>
    <tr>
      <th>8797</th>
      <td>6杨静凯6</td>
      <td>1</td>
    </tr>
    <tr>
      <th>8796</th>
      <td>6杨惠琼19</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 2 columns</p>
</div>



<p>构造”M”,交易时间内，交易的总金额</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = df.groupby(<span class="string">&#x27;买家昵称&#x27;</span>)[<span class="string">&#x27;实付金额&#x27;</span>].<span class="built_in">sum</span>().reset_index()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M.rename(columns=&#123;<span class="string">&#x27;实付金额&#x27;</span>:<span class="string">&quot;M&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>R</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>.blue_ram</td>
      <td>146</td>
    </tr>
    <tr>
      <th>1</th>
      <td>.christiny</td>
      <td>152</td>
    </tr>
    <tr>
      <th>2</th>
      <td>.willn1</td>
      <td>170</td>
    </tr>
    <tr>
      <th>3</th>
      <td>.托托m</td>
      <td>170</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0000妮</td>
      <td>2</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>龙火师</td>
      <td>84</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>龙魔鬼女</td>
      <td>72</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>龟mil宝</td>
      <td>11</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>！谢鹏逗逼？</td>
      <td>24</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>157</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 2 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">F</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>F</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>.blue_ram</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>.christiny</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>.willn1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>.托托m</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0000妮</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>龙火师</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>龙魔鬼女</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>龟mil宝</td>
      <td>2</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>！谢鹏逗逼？</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 2 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">F</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>F</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>.blue_ram</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>.christiny</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>.willn1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>.托托m</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0000妮</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>龙火师</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>龙魔鬼女</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>龟mil宝</td>
      <td>2</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>！谢鹏逗逼？</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 2 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F = pd.merge(R,F,on=<span class="string">&quot;买家昵称&quot;</span>,how=<span class="string">&#x27;inner&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M = pd.merge(R_F,M,how=<span class="string">&quot;inner&quot;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>R</th>
      <th>F</th>
      <th>M</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>.blue_ram</td>
      <td>146</td>
      <td>1</td>
      <td>49</td>
    </tr>
    <tr>
      <th>1</th>
      <td>.christiny</td>
      <td>152</td>
      <td>1</td>
      <td>183</td>
    </tr>
    <tr>
      <th>2</th>
      <td>.willn1</td>
      <td>170</td>
      <td>1</td>
      <td>34</td>
    </tr>
    <tr>
      <th>3</th>
      <td>.托托m</td>
      <td>170</td>
      <td>1</td>
      <td>37</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0000妮</td>
      <td>2</td>
      <td>1</td>
      <td>164</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>龙火师</td>
      <td>84</td>
      <td>1</td>
      <td>175</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>龙魔鬼女</td>
      <td>72</td>
      <td>1</td>
      <td>87</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>龟mil宝</td>
      <td>11</td>
      <td>2</td>
      <td>497</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>！谢鹏逗逼？</td>
      <td>24</td>
      <td>1</td>
      <td>137</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>157</td>
      <td>1</td>
      <td>185</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 4 columns</p>
</div>



<h1 id="三、RFM用户分层"><a href="#三、RFM用户分层" class="headerlink" title="三、RFM用户分层"></a>三、RFM用户分层</h1><p><img src="https://cdn.kesci.com/upload/image/qpoojgwxkm.png?imageView2/0/w/960/h/960" alt="图片"></p>
<p><img src="https://cdn.kesci.com/upload/image/qpoojqsoih.png?imageView2/0/w/960/h/960" alt="图片"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M.describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>R</th>
      <th>F</th>
      <th>M</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>25420.000000</td>
      <td>25420.000000</td>
      <td>25420.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>97.043273</td>
      <td>1.093312</td>
      <td>138.129150</td>
    </tr>
    <tr>
      <th>std</th>
      <td>58.448454</td>
      <td>0.347792</td>
      <td>96.593433</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.000000</td>
      <td>1.000000</td>
      <td>30.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>37.000000</td>
      <td>1.000000</td>
      <td>76.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>105.000000</td>
      <td>1.000000</td>
      <td>124.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>154.000000</td>
      <td>1.000000</td>
      <td>191.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>180.000000</td>
      <td>15.000000</td>
      <td>6091.000000</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">R_F_M.R.plot(kind=<span class="string">&quot;hist&quot;</span>,bins=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/16/%E5%9F%BA%E4%BA%8ERFM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E4%BB%B7%E5%80%BC%E6%8C%96%E6%8E%98/output_36_0.png" alt="png"></p>
<h2 id="（1）第一种客户分层方法"><a href="#（1）第一种客户分层方法" class="headerlink" title="（1）第一种客户分层方法"></a>（1）第一种客户分层方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M[<span class="string">&#x27;R_score&#x27;</span>]  = R_F_M[<span class="string">&#x27;R&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:  <span class="number">1</span> <span class="keyword">if</span> x&lt;=<span class="number">105</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>R</th>
      <th>F</th>
      <th>M</th>
      <th>R_score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>.blue_ram</td>
      <td>146</td>
      <td>1</td>
      <td>49</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>.christiny</td>
      <td>152</td>
      <td>1</td>
      <td>183</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>.willn1</td>
      <td>170</td>
      <td>1</td>
      <td>34</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>.托托m</td>
      <td>170</td>
      <td>1</td>
      <td>37</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0000妮</td>
      <td>2</td>
      <td>1</td>
      <td>164</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>龙火师</td>
      <td>84</td>
      <td>1</td>
      <td>175</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>龙魔鬼女</td>
      <td>72</td>
      <td>1</td>
      <td>87</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>龟mil宝</td>
      <td>11</td>
      <td>2</td>
      <td>497</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>！谢鹏逗逼？</td>
      <td>24</td>
      <td>1</td>
      <td>137</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>157</td>
      <td>1</td>
      <td>185</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 5 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M[<span class="string">&#x27;F_score&#x27;</span>]  = R_F_M[<span class="string">&#x27;F&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:  <span class="number">1</span> <span class="keyword">if</span> x&gt;=R_F_M[<span class="string">&#x27;F&#x27;</span>].mean() <span class="keyword">else</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>R</th>
      <th>F</th>
      <th>M</th>
      <th>R_score</th>
      <th>F_score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>.blue_ram</td>
      <td>146</td>
      <td>1</td>
      <td>49</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>.christiny</td>
      <td>152</td>
      <td>1</td>
      <td>183</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>.willn1</td>
      <td>170</td>
      <td>1</td>
      <td>34</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>.托托m</td>
      <td>170</td>
      <td>1</td>
      <td>37</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0000妮</td>
      <td>2</td>
      <td>1</td>
      <td>164</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>龙火师</td>
      <td>84</td>
      <td>1</td>
      <td>175</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>龙魔鬼女</td>
      <td>72</td>
      <td>1</td>
      <td>87</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>龟mil宝</td>
      <td>11</td>
      <td>2</td>
      <td>497</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>！谢鹏逗逼？</td>
      <td>24</td>
      <td>1</td>
      <td>137</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>157</td>
      <td>1</td>
      <td>185</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 6 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M[<span class="string">&#x27;M_score&#x27;</span>]  = R_F_M[<span class="string">&#x27;M&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x:  <span class="number">1</span> <span class="keyword">if</span> x&gt;=R_F_M[<span class="string">&#x27;M&#x27;</span>].mean() <span class="keyword">else</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>R</th>
      <th>F</th>
      <th>M</th>
      <th>R_score</th>
      <th>F_score</th>
      <th>M_score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>.blue_ram</td>
      <td>146</td>
      <td>1</td>
      <td>49</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>.christiny</td>
      <td>152</td>
      <td>1</td>
      <td>183</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>.willn1</td>
      <td>170</td>
      <td>1</td>
      <td>34</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>.托托m</td>
      <td>170</td>
      <td>1</td>
      <td>37</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0000妮</td>
      <td>2</td>
      <td>1</td>
      <td>164</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>龙火师</td>
      <td>84</td>
      <td>1</td>
      <td>175</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>龙魔鬼女</td>
      <td>72</td>
      <td>1</td>
      <td>87</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>龟mil宝</td>
      <td>11</td>
      <td>2</td>
      <td>497</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>！谢鹏逗逼？</td>
      <td>24</td>
      <td>1</td>
      <td>137</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>157</td>
      <td>1</td>
      <td>185</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 7 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M[<span class="string">&#x27;R_score&#x27;</span>]  = R_F_M[<span class="string">&#x27;R_score&#x27;</span>].astype(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">R_F_M[<span class="string">&#x27;F_score&#x27;</span>]  = R_F_M[<span class="string">&#x27;F_score&#x27;</span>].astype(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">R_F_M[<span class="string">&#x27;M_score&#x27;</span>]  = R_F_M[<span class="string">&#x27;M_score&#x27;</span>].astype(<span class="string">&#x27;str&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M[<span class="string">&#x27;score&#x27;</span>] = R_F_M[<span class="string">&#x27;R_score&#x27;</span>]+R_F_M[<span class="string">&#x27;F_score&#x27;</span>]+R_F_M[<span class="string">&#x27;M_score&#x27;</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>R</th>
      <th>F</th>
      <th>M</th>
      <th>R_score</th>
      <th>F_score</th>
      <th>M_score</th>
      <th>score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>.blue_ram</td>
      <td>146</td>
      <td>1</td>
      <td>49</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>000</td>
    </tr>
    <tr>
      <th>1</th>
      <td>.christiny</td>
      <td>152</td>
      <td>1</td>
      <td>183</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>001</td>
    </tr>
    <tr>
      <th>2</th>
      <td>.willn1</td>
      <td>170</td>
      <td>1</td>
      <td>34</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>.托托m</td>
      <td>170</td>
      <td>1</td>
      <td>37</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0000妮</td>
      <td>2</td>
      <td>1</td>
      <td>164</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>101</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>龙火师</td>
      <td>84</td>
      <td>1</td>
      <td>175</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>101</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>龙魔鬼女</td>
      <td>72</td>
      <td>1</td>
      <td>87</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>100</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>龟mil宝</td>
      <td>11</td>
      <td>2</td>
      <td>497</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>111</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>！谢鹏逗逼？</td>
      <td>24</td>
      <td>1</td>
      <td>137</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>100</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>157</td>
      <td>1</td>
      <td>185</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>001</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 8 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">map_dict =&#123;</span><br><span class="line">    <span class="string">&#x27;111&#x27;</span>:<span class="string">&#x27;重要价值客户&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;101&#x27;</span>:<span class="string">&quot;重要保持客户&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;011&#x27;</span>:<span class="string">&#x27;重要发展客户&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;001&#x27;</span>:<span class="string">&quot;重要挽留客户&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;110&#x27;</span>:<span class="string">&quot;一般价值客户&quot;</span>,</span><br><span class="line">    <span class="string">&quot;100&quot;</span>:<span class="string">&#x27;一般发展客户&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;010&#x27;</span>:<span class="string">&#x27;一般保持客户&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000&#x27;</span>:<span class="string">&#x27;一般挽留客户&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M[<span class="string">&#x27;user_level&#x27;</span>] = R_F_M[<span class="string">&#x27;score&#x27;</span>].<span class="built_in">map</span>(map_dict)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>买家昵称</th>
      <th>R</th>
      <th>F</th>
      <th>M</th>
      <th>R_score</th>
      <th>F_score</th>
      <th>M_score</th>
      <th>score</th>
      <th>user_level</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>.blue_ram</td>
      <td>146</td>
      <td>1</td>
      <td>49</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>000</td>
      <td>一般挽留客户</td>
    </tr>
    <tr>
      <th>1</th>
      <td>.christiny</td>
      <td>152</td>
      <td>1</td>
      <td>183</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>001</td>
      <td>重要挽留客户</td>
    </tr>
    <tr>
      <th>2</th>
      <td>.willn1</td>
      <td>170</td>
      <td>1</td>
      <td>34</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>000</td>
      <td>一般挽留客户</td>
    </tr>
    <tr>
      <th>3</th>
      <td>.托托m</td>
      <td>170</td>
      <td>1</td>
      <td>37</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>000</td>
      <td>一般挽留客户</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0000妮</td>
      <td>2</td>
      <td>1</td>
      <td>164</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>101</td>
      <td>重要保持客户</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>龙火师</td>
      <td>84</td>
      <td>1</td>
      <td>175</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>101</td>
      <td>重要保持客户</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>龙魔鬼女</td>
      <td>72</td>
      <td>1</td>
      <td>87</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>100</td>
      <td>一般发展客户</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>龟mil宝</td>
      <td>11</td>
      <td>2</td>
      <td>497</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>111</td>
      <td>重要价值客户</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>！谢鹏逗逼？</td>
      <td>24</td>
      <td>1</td>
      <td>137</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>100</td>
      <td>一般发展客户</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>～小邱～</td>
      <td>157</td>
      <td>1</td>
      <td>185</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>001</td>
      <td>重要挽留客户</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 9 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M[<span class="string">&#x27;user_level&#x27;</span>].value_counts(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>一般挽留客户    0.288316
一般发展客户    0.250747
重要保持客户    0.194414
重要挽留客户    0.185799
重要价值客户    0.045358
重要发展客户    0.021361
一般价值客户    0.010228
一般保持客户    0.003777
Name: user_level, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M.groupby(<span class="string">&#x27;user_level&#x27;</span>).<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>R</th>
      <th>F</th>
      <th>M</th>
    </tr>
    <tr>
      <th>user_level</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>一般价值客户</th>
      <td>8916</td>
      <td>524</td>
      <td>26405</td>
    </tr>
    <tr>
      <th>一般保持客户</th>
      <td>13966</td>
      <td>192</td>
      <td>10103</td>
    </tr>
    <tr>
      <th>一般发展客户</th>
      <td>279042</td>
      <td>6374</td>
      <td>497161</td>
    </tr>
    <tr>
      <th>一般挽留客户</th>
      <td>1112585</td>
      <td>7329</td>
      <td>559147</td>
    </tr>
    <tr>
      <th>重要价值客户</th>
      <td>46801</td>
      <td>2584</td>
      <td>368334</td>
    </tr>
    <tr>
      <th>重要保持客户</th>
      <td>237748</td>
      <td>4942</td>
      <td>964670</td>
    </tr>
    <tr>
      <th>重要发展客户</th>
      <td>79273</td>
      <td>1124</td>
      <td>153088</td>
    </tr>
    <tr>
      <th>重要挽留客户</th>
      <td>688509</td>
      <td>4723</td>
      <td>932335</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R_F_M.loc[R_F_M.user_level == <span class="string">&#x27;重要价值客户&#x27;</span>,<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;g&#x27;</span></span><br><span class="line">R_F_M.loc[~(R_F_M.user_level == <span class="string">&#x27;重要价值客户&#x27;</span>),<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;r&#x27;</span></span><br><span class="line">R_F_M.plot.scatter(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,c = R_F_M.color)</span><br><span class="line"><span class="comment">#pandas中增加颜色需要新增加一列</span></span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x161350f1790&gt;
</code></pre>
<p><img src="/2021/04/16/%E5%9F%BA%E4%BA%8ERFM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E4%BB%B7%E5%80%BC%E6%8C%96%E6%8E%98/output_52_1.png" alt="png"></p>
<p>可以看出，重要价值客户主要集中在右下角</p>
<h2 id="（2）第二种客户分层方法（K-Means聚类）"><a href="#（2）第二种客户分层方法（K-Means聚类）" class="headerlink" title="（2）第二种客户分层方法（K-Means聚类）"></a>（2）第二种客户分层方法（K-Means聚类）</h2><h3 id="标准化处理"><a href="#标准化处理" class="headerlink" title="标准化处理"></a>标准化处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = R_F_M.loc[:,[<span class="string">&quot;R&quot;</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;M&quot;</span>]]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.values</span><br></pre></td></tr></table></figure>




<pre><code>array([[146,   1,  49],
       [152,   1, 183],
       [170,   1,  34],
       ...,
       [ 11,   2, 497],
       [ 24,   1, 137],
       [157,   1, 185]], dtype=int64)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">rfm_data=scaler.fit_transform(data)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rfm_data</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 0.83762164, -0.26830462, -0.92274289],
       [ 0.94027821, -0.26830462,  0.46454227],
       [ 1.24824793, -0.26830462, -1.078036  ],
       ...,
       [-1.47215126,  2.60703406,  3.71534479],
       [-1.24972868, -0.26830462, -0.01168995],
       [ 1.02582535, -0.26830462,  0.48524802]])
</code></pre>
<h3 id="寻找最佳聚类个数"><a href="#寻找最佳聚类个数" class="headerlink" title="寻找最佳聚类个数"></a>寻找最佳聚类个数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确定最佳聚类个数</span></span><br><span class="line">inertia = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    model = KMeans(n_clusters=i,init=<span class="string">&#x27;k-means++&#x27;</span>,max_iter=<span class="number">300</span>,n_init=<span class="number">10</span>,random_state=<span class="number">0</span>)</span><br><span class="line">    model.fit(rfm_data)</span><br><span class="line">    inertia.append(model.inertia_)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>),inertia,<span class="string">&#x27;o--&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x161398490d0&gt;]
</code></pre>
<p><img src="/2021/04/16/%E5%9F%BA%E4%BA%8ERFM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E4%BB%B7%E5%80%BC%E6%8C%96%E6%8E%98/output_62_1.png" alt="png"></p>
<p>最佳聚类个数为3个</p>
<h3 id="降维查看聚类效果"><a href="#降维查看聚类效果" class="headerlink" title="降维查看聚类效果"></a>降维查看聚类效果</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cluster = KMeans(n_clusters=<span class="number">3</span>)</span><br><span class="line">cluster.fit(rfm_data)</span><br></pre></td></tr></table></figure>




<pre><code>KMeans(n_clusters=3)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> manifold </span><br><span class="line">tsne = manifold.TSNE()   <span class="comment">#将关系数据降维二维</span></span><br><span class="line">tsne_data = tsne.fit_transform(rfm_data)</span><br><span class="line">tsne_df = pd.DataFrame(tsne_data,columns=[<span class="string">&#x27;col1&#x27;</span>,<span class="string">&#x27;col2&#x27;</span>])</span><br><span class="line">tsne_df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>col1</th>
      <th>col2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>4.486673</td>
      <td>-72.765404</td>
    </tr>
    <tr>
      <th>1</th>
      <td>6.093413</td>
      <td>18.748190</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-46.542316</td>
      <td>-11.681333</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-25.099775</td>
      <td>-56.601101</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-21.562031</td>
      <td>-31.911201</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>25415</th>
      <td>37.587803</td>
      <td>-6.389628</td>
    </tr>
    <tr>
      <th>25416</th>
      <td>-9.102419</td>
      <td>90.326508</td>
    </tr>
    <tr>
      <th>25417</th>
      <td>-23.311127</td>
      <td>72.044922</td>
    </tr>
    <tr>
      <th>25418</th>
      <td>-2.808266</td>
      <td>-29.557055</td>
    </tr>
    <tr>
      <th>25419</th>
      <td>8.125836</td>
      <td>16.763401</td>
    </tr>
  </tbody>
</table>
<p>25420 rows × 2 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tsne_df[<span class="string">&#x27;label&#x27;</span>] = cluster.predict(rfm_data)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">sns.scatterplot(data=tsne_df,x=<span class="string">&#x27;col1&#x27;</span>,y=<span class="string">&#x27;col2&#x27;</span>,hue=<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/16/%E5%9F%BA%E4%BA%8ERFM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E4%BB%B7%E5%80%BC%E6%8C%96%E6%8E%98/output_68_0.png" alt="png"></p>
<p>通过降维，将三维立体图降维为平面图，上图3个不同颜色代表3个不同的人群，因为K-Means是无监督学习，主要负责把特征比较明显的用户归为一类，具体每一类分别代表什么群体，需要我们自己进行分析，下面会有讲述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">score = metrics.silhouette_score(rfm_data,tsne_df[<span class="string">&#x27;label&#x27;</span>])</span><br><span class="line">print(<span class="string">&#x27;聚类个数为3时，轮廓函数:&#x27;</span> , score)</span><br></pre></td></tr></table></figure>

<pre><code>聚类个数为3时，轮廓函数: 0.4691984154822774
</code></pre>
<p>聚类效果较好</p>
<h3 id="客户分层"><a href="#客户分层" class="headerlink" title="客户分层"></a>客户分层</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result =pd.DataFrame(cluster.cluster_centers_,columns=[<span class="string">&#x27;R&#x27;</span> , <span class="string">&#x27;F&#x27;</span> ,<span class="string">&#x27;M&#x27;</span>])</span><br><span class="line">result.plot(kind=<span class="string">&#x27;bar&#x27;</span>,color=[<span class="string">&#x27;C1&#x27;</span>,<span class="string">&#x27;C2&#x27;</span>,<span class="string">&#x27;C3&#x27;</span>],clip_on=<span class="literal">False</span>,alpha = <span class="number">0.5</span>,figsize=(<span class="number">20</span>,<span class="number">8</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2021/04/16/%E5%9F%BA%E4%BA%8ERFM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E4%BB%B7%E5%80%BC%E6%8C%96%E6%8E%98/output_73_0.png" alt="png"></p>
<ul>
<li><p>0组：距离最近一次消费时间较长，消费频次较高，消费金额较多（属于重要客户，但是有流失的风险，需要对这些客户进行召回）</p>
</li>
<li><p>1组：距离最近一次消费时间较短，消费频次与消费金额都比较低（属于新客户，要适当做一些活动，刺激消费需求）</p>
</li>
<li><p>2组：（低价值客户）</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 各类客户占比</span></span><br><span class="line">R_F_M[<span class="string">&#x27;label&#x27;</span>] = cluster.labels_</span><br><span class="line">R_F_M[<span class="string">&#x27;label&#x27;</span>].value_counts(<span class="number">1</span>).sort_index()</span><br></pre></td></tr></table></figure>




<pre><code>0    0.080763
1    0.535090
2    0.384146
Name: label, dtype: float64
</code></pre>
<p> 0类客户占比最少，只有8%，1类客户占比最多（老客户较少，并且有流失的风险，新客户较多） </p>
<p>这说明，产品本身对客户有着较强的吸引力，或者产品本身的宣传已经做到位，但是对于产品的服务及质量并不能使得消费者满意，具有很大的流失风险，<br>后期应该注重产品的服务及用户的产品体验，适当的对用户进行调查，以了解用户对产品本身的诉求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析实战</category>
      </categories>
      <tags>
        <tag>客户分群</tag>
        <tag>rfm</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>电商用户画像实战</title>
    <url>/2021/04/16/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="一、项目背景"><a href="#一、项目背景" class="headerlink" title="一、项目背景"></a>一、项目背景</h1><p>你是某电商平台的数据分析师，你的运营同事找到你，最近某家电类目的订单数量，浏览量有所下降<br>平台想做一些促销活动，给用户发放优惠券，希望你能对本次活动提出一些建议。</p>
<span id="more"></span>
<p>促销活动需要哪几个部分的信息？</p>
<ul>
<li>促销活动的受众群体</li>
<li>促销活动的上线时间</li>
<li>促销活动覆盖的产品</li>
<li>………</li>
</ul>
<p>主要用到的工具：</p>
<ul>
<li>pandas </li>
<li>pyecharts</li>
<li>tableau</li>
</ul>
<h1 id="二、数据来源"><a href="#二、数据来源" class="headerlink" title="二、数据来源"></a>二、数据来源</h1><p>数据来源某电商平台2020年8月12日-2020年8月19日某家电类目脱敏订单数据</p>
<h1 id="三、数据预处理"><a href="#三、数据预处理" class="headerlink" title="三、数据预处理"></a>三、数据预处理</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_df = pd.read_csv(<span class="string">&#x27;xjd_user_info.csv&#x27;</span>,sep=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">order_df = pd.read_csv(<span class="string">&#x27;xjd_order_d.csv&#x27;</span>,sep=<span class="string">&quot;\t&quot;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_log_acct</th>
      <th>ulp_base_sex</th>
      <th>ulp_base_age</th>
      <th>ulp_base_income</th>
      <th>ulp_base_education</th>
      <th>ulp_base_regprovince</th>
      <th>ulp_base_regcity</th>
      <th>ulp_user_reg_source_det</th>
      <th>ulp_user_reg_days</th>
      <th>ulp_base_regtime</th>
      <th>...</th>
      <th>cvl_glob_values</th>
      <th>cvl_glob_loyalty</th>
      <th>cvl_glob_platform</th>
      <th>cfv_sens_promotion</th>
      <th>cfv_sens_comment</th>
      <th>reg_user_type_cd</th>
      <th>member_reg_gender</th>
      <th>reg_birthday</th>
      <th>last_login_tm</th>
      <th>factory_user_flag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1030914909</td>
      <td>0</td>
      <td>3</td>
      <td>-1</td>
      <td>3</td>
      <td>-1</td>
      <td>闵行区</td>
      <td>NaN</td>
      <td>3164</td>
      <td>2011-12</td>
      <td>...</td>
      <td>0.648078</td>
      <td>中度-忠诚型</td>
      <td>-1.000000</td>
      <td>L1-3</td>
      <td>L1-4</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>2019-06-08 22:18:32.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>103385299</td>
      <td>1</td>
      <td>3</td>
      <td>-1</td>
      <td>4</td>
      <td>-1</td>
      <td>温州市</td>
      <td>NaN</td>
      <td>3969</td>
      <td>2009-10</td>
      <td>...</td>
      <td>4.023711</td>
      <td>高度-忠诚型</td>
      <td>-1.000000</td>
      <td>L1-4</td>
      <td>L1-4</td>
      <td>44.0</td>
      <td>0.0</td>
      <td>1991-9-9</td>
      <td>2020-08-13 18:32:57.0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>10638747-707577</td>
      <td>1</td>
      <td>3</td>
      <td>-1</td>
      <td>3</td>
      <td>-1</td>
      <td>朝阳区</td>
      <td>NaN</td>
      <td>2637</td>
      <td>2013-05</td>
      <td>...</td>
      <td>1.620113</td>
      <td>高度-忠诚型</td>
      <td>43.389526</td>
      <td>L1-2</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1992-4-3</td>
      <td>2020-06-20 17:11:33.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1087096-78471807</td>
      <td>1</td>
      <td>4</td>
      <td>-1</td>
      <td>4</td>
      <td>-1</td>
      <td>-1</td>
      <td>NaN</td>
      <td>3740</td>
      <td>2010-05</td>
      <td>...</td>
      <td>15.702956</td>
      <td>高度-忠诚型</td>
      <td>-1.000000</td>
      <td>L1-3</td>
      <td>L1-4</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>2014-1-1</td>
      <td>2020-08-13 12:16:12.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1090625252_m</td>
      <td>1</td>
      <td>6</td>
      <td>-1</td>
      <td>2</td>
      <td>-1</td>
      <td>-1</td>
      <td>NaN</td>
      <td>2379</td>
      <td>2014-02</td>
      <td>...</td>
      <td>1.328761</td>
      <td>近期-普通型</td>
      <td>-1.000000</td>
      <td>L1-4</td>
      <td>L1-3</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>2019-09-28 10:29:32.0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 39 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">order_df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_log_acct</th>
      <th>parent_sale_ord_id</th>
      <th>sale_ord_id</th>
      <th>sale_ord_tm</th>
      <th>sale_ord_dt</th>
      <th>item_sku_id</th>
      <th>item_name</th>
      <th>brandname</th>
      <th>sale_qtty</th>
      <th>item_first_cate_name</th>
      <th>...</th>
      <th>cancel_flag</th>
      <th>check_account_tm</th>
      <th>total_offer_amount</th>
      <th>self_ord_flag</th>
      <th>user_site_city_id</th>
      <th>user_site_province_id</th>
      <th>user_lv_cd</th>
      <th>rev_addr_province_id</th>
      <th>rev_addr_city_id</th>
      <th>wait_check_account_flag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>------1289</td>
      <td>130704863113</td>
      <td>124906164828</td>
      <td>2020-08-18 00:02:10.0</td>
      <td>2020-08-18</td>
      <td>100009149228</td>
      <td>飞利浦 (PHILIPS)蒸汽电熨斗家用 熨烫机 GC4902/28</td>
      <td>飞利浦（PHILIPS）</td>
      <td>2</td>
      <td>家用电器</td>
      <td>...</td>
      <td>1</td>
      <td>2020-08-18 00:02:25.0</td>
      <td>639.4</td>
      <td>1</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>50</td>
      <td>1</td>
      <td>2809</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>------1289</td>
      <td>130704863113</td>
      <td>124903359952</td>
      <td>2020-08-18 00:02:10.0</td>
      <td>2020-08-18</td>
      <td>4559760</td>
      <td>德尔玛（Deerma） 加湿器 5L大容量 家用卧室静音  迷你香薰空气加湿 DEM-F60...</td>
      <td>德尔玛（Deerma）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>1</td>
      <td>2020-08-18 00:02:25.0</td>
      <td>36.8</td>
      <td>1</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>50</td>
      <td>1</td>
      <td>2809</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>------1289</td>
      <td>130704863113</td>
      <td>130704863113</td>
      <td>2020-08-18 00:02:10.0</td>
      <td>2020-08-18</td>
      <td>100009149228</td>
      <td>飞利浦 (PHILIPS)蒸汽电熨斗家用 熨烫机 GC4902/28</td>
      <td>飞利浦（PHILIPS）</td>
      <td>2</td>
      <td>家用电器</td>
      <td>...</td>
      <td>0</td>
      <td>2020-08-18 00:02:23.0</td>
      <td>0.0</td>
      <td>1</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>50</td>
      <td>1</td>
      <td>2809</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>------1289</td>
      <td>130699964163</td>
      <td>130699964163</td>
      <td>2020-08-18 00:00:16.0</td>
      <td>2020-08-18</td>
      <td>100011967276</td>
      <td>爱丽思(IRIS OHYAMA)日本 吸尘器 无线家用充电手持轻便智能吸尘机IC-SDC2C（粉）</td>
      <td>IRIS OHYAMA</td>
      <td>3</td>
      <td>家用电器</td>
      <td>...</td>
      <td>1</td>
      <td>2020-08-18 00:00:25.0</td>
      <td>478.8</td>
      <td>1</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>50</td>
      <td>1</td>
      <td>2809</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>------1289</td>
      <td>130704863113</td>
      <td>124903359952</td>
      <td>2020-08-18 00:02:10.0</td>
      <td>2020-08-18</td>
      <td>100006533674</td>
      <td>德尔玛（Deerma）加湿器净水盒 水箱专用 通用 银离子净水盒</td>
      <td>德尔玛（Deerma）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>1</td>
      <td>2020-08-18 00:02:25.0</td>
      <td>0.0</td>
      <td>1</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>50</td>
      <td>1</td>
      <td>2809</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 26 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 215090 entries, 0 to 215089
Data columns (total 39 columns):
 #   Column                   Non-Null Count   Dtype  
---  ------                   --------------   -----  
 0   user_log_acct            215090 non-null  object 
 1   ulp_base_sex             215090 non-null  int64  
 2   ulp_base_age             215090 non-null  int64  
 3   ulp_base_income          215090 non-null  int64  
 4   ulp_base_education       215090 non-null  int64  
 5   ulp_base_regprovince     215090 non-null  int64  
 6   ulp_base_regcity         215090 non-null  object 
 7   ulp_user_reg_source_det  0 non-null       float64
 8   ulp_user_reg_days        215090 non-null  int64  
 9   ulp_base_regtime         215090 non-null  object 
 10  ulp_base_ulevel          215090 non-null  int64  
 11  ulp_jd_jx_value          215090 non-null  int64  
 12  ulp_is_plus_member       215090 non-null  int64  
 13  ulp_is_student_customer  215090 non-null  int64  
 14  ulp_base_profession      215090 non-null  object 
 15  ulp_addr_province        215090 non-null  object 
 16  ulp_addr_city            215090 non-null  object 
 17  ulp_addr_county          215090 non-null  object 
 18  ulp_site_province_name   215090 non-null  int64  
 19  ulp_site_city_name       215090 non-null  int64  
 20  ulp_base_marriage        215090 non-null  int64  
 21  ulp_base_child           215090 non-null  object 
 22  ulp_seni_childage        215090 non-null  object 
 23  ulp_seni_childsex        215090 non-null  int64  
 24  ulp_seni_hascar          215090 non-null  int64  
 25  ulp_tmsale_3m_pctatm     215090 non-null  float64
 26  ulp_old                  215090 non-null  object 
 27  ulp_plus_used            215090 non-null  int64  
 28  cvl_glob_valuegrp        215090 non-null  object 
 29  cvl_glob_values          215090 non-null  float64
 30  cvl_glob_loyalty         215090 non-null  object 
 31  cvl_glob_platform        215090 non-null  float64
 32  cfv_sens_promotion       215090 non-null  object 
 33  cfv_sens_comment         215090 non-null  object 
 34  reg_user_type_cd         98111 non-null   float64
 35  member_reg_gender        214310 non-null  float64
 36  reg_birthday             70394 non-null   object 
 37  last_login_tm            201671 non-null  object 
 38  factory_user_flag        215090 non-null  int64  
dtypes: float64(6), int64(17), object(16)
memory usage: 64.0+ MB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_df[<span class="string">&#x27;user_log_acct&#x27;</span>].duplicated().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>0
</code></pre>
<p><strong>没有重复用户</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">order_df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 607712 entries, 0 to 607711
Data columns (total 26 columns):
 #   Column                   Non-Null Count   Dtype  
---  ------                   --------------   -----  
 0   user_log_acct            607712 non-null  object 
 1   parent_sale_ord_id       607712 non-null  int64  
 2   sale_ord_id              607712 non-null  int64  
 3   sale_ord_tm              607712 non-null  object 
 4   sale_ord_dt              607712 non-null  object 
 5   item_sku_id              607712 non-null  int64  
 6   item_name                607712 non-null  object 
 7   brandname                607712 non-null  object 
 8   sale_qtty                607712 non-null  int64  
 9   item_first_cate_name     607712 non-null  object 
 10  item_second_cate_name    607712 non-null  object 
 11  item_third_cate_name     607712 non-null  object 
 12  before_prefr_unit_price  607712 non-null  float64
 13  after_prefr_unit_price   607712 non-null  float64
 14  user_actual_pay_amount   607712 non-null  float64
 15  sale_ord_valid_flag      607712 non-null  int64  
 16  cancel_flag              607712 non-null  int64  
 17  check_account_tm         507505 non-null  object 
 18  total_offer_amount       607712 non-null  float64
 19  self_ord_flag            607712 non-null  int64  
 20  user_site_city_id        430092 non-null  float64
 21  user_site_province_id    430224 non-null  float64
 22  user_lv_cd               607712 non-null  int64  
 23  rev_addr_province_id     607712 non-null  int64  
 24  rev_addr_city_id         607712 non-null  int64  
 25  wait_check_account_flag  607712 non-null  int64  
dtypes: float64(6), int64(11), object(9)
memory usage: 120.5+ MB
</code></pre>
<p>订单表无空值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接两个表，看一下都有哪些用户购买了商品</span></span><br><span class="line">user_order_df = pd.merge(order_df,user_df,on=<span class="string">&quot;user_log_acct&quot;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_order_df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_log_acct</th>
      <th>parent_sale_ord_id</th>
      <th>sale_ord_id</th>
      <th>sale_ord_tm</th>
      <th>sale_ord_dt</th>
      <th>item_sku_id</th>
      <th>item_name</th>
      <th>brandname</th>
      <th>sale_qtty</th>
      <th>item_first_cate_name</th>
      <th>...</th>
      <th>cvl_glob_values</th>
      <th>cvl_glob_loyalty</th>
      <th>cvl_glob_platform</th>
      <th>cfv_sens_promotion</th>
      <th>cfv_sens_comment</th>
      <th>reg_user_type_cd</th>
      <th>member_reg_gender</th>
      <th>reg_birthday</th>
      <th>last_login_tm</th>
      <th>factory_user_flag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>------1289</td>
      <td>130704863113</td>
      <td>124906164828</td>
      <td>2020-08-18 00:02:10.0</td>
      <td>2020-08-18</td>
      <td>100009149228</td>
      <td>飞利浦 (PHILIPS)蒸汽电熨斗家用 熨烫机 GC4902/28</td>
      <td>飞利浦（PHILIPS）</td>
      <td>2</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.037542</td>
      <td>高度-忠诚型</td>
      <td>77.973809</td>
      <td>L1-4</td>
      <td>L1-4</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>1997-2-10</td>
      <td>2020-08-11 22:55:05.0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>------1289</td>
      <td>130704863113</td>
      <td>124903359952</td>
      <td>2020-08-18 00:02:10.0</td>
      <td>2020-08-18</td>
      <td>4559760</td>
      <td>德尔玛（Deerma） 加湿器 5L大容量 家用卧室静音  迷你香薰空气加湿 DEM-F60...</td>
      <td>德尔玛（Deerma）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.037542</td>
      <td>高度-忠诚型</td>
      <td>77.973809</td>
      <td>L1-4</td>
      <td>L1-4</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>1997-2-10</td>
      <td>2020-08-11 22:55:05.0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>------1289</td>
      <td>130704863113</td>
      <td>130704863113</td>
      <td>2020-08-18 00:02:10.0</td>
      <td>2020-08-18</td>
      <td>100009149228</td>
      <td>飞利浦 (PHILIPS)蒸汽电熨斗家用 熨烫机 GC4902/28</td>
      <td>飞利浦（PHILIPS）</td>
      <td>2</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.037542</td>
      <td>高度-忠诚型</td>
      <td>77.973809</td>
      <td>L1-4</td>
      <td>L1-4</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>1997-2-10</td>
      <td>2020-08-11 22:55:05.0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>------1289</td>
      <td>130699964163</td>
      <td>130699964163</td>
      <td>2020-08-18 00:00:16.0</td>
      <td>2020-08-18</td>
      <td>100011967276</td>
      <td>爱丽思(IRIS OHYAMA)日本 吸尘器 无线家用充电手持轻便智能吸尘机IC-SDC2C（粉）</td>
      <td>IRIS OHYAMA</td>
      <td>3</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.037542</td>
      <td>高度-忠诚型</td>
      <td>77.973809</td>
      <td>L1-4</td>
      <td>L1-4</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>1997-2-10</td>
      <td>2020-08-11 22:55:05.0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>------1289</td>
      <td>130704863113</td>
      <td>124903359952</td>
      <td>2020-08-18 00:02:10.0</td>
      <td>2020-08-18</td>
      <td>100006533674</td>
      <td>德尔玛（Deerma）加湿器净水盒 水箱专用 通用 银离子净水盒</td>
      <td>德尔玛（Deerma）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.037542</td>
      <td>高度-忠诚型</td>
      <td>77.973809</td>
      <td>L1-4</td>
      <td>L1-4</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>1997-2-10</td>
      <td>2020-08-11 22:55:05.0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>607707</th>
      <td>龚天睿</td>
      <td>124772876191</td>
      <td>124772404564</td>
      <td>2020-08-15 11:03:24.0</td>
      <td>2020-08-15</td>
      <td>5149351</td>
      <td>碧然德（BRITA）家用净水壶 滤水壶滤芯 MAXTRA+LE 去水垢专家滤芯 3枚装</td>
      <td>碧然德</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.442311</td>
      <td>高度-忠诚型</td>
      <td>74.562119</td>
      <td>L1-4</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>2011-1-1</td>
      <td>2019-12-04 22:35:59.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>607708</th>
      <td>龚天睿</td>
      <td>124772876191</td>
      <td>124770096176</td>
      <td>2020-08-15 11:03:24.0</td>
      <td>2020-08-15</td>
      <td>5149351</td>
      <td>碧然德（BRITA）家用净水壶 滤水壶滤芯 MAXTRA+LE 去水垢专家滤芯 3枚装</td>
      <td>碧然德</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.442311</td>
      <td>高度-忠诚型</td>
      <td>74.562119</td>
      <td>L1-4</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>2011-1-1</td>
      <td>2019-12-04 22:35:59.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>607709</th>
      <td>龚天睿</td>
      <td>124772876191</td>
      <td>124772876191</td>
      <td>2020-08-15 11:03:24.0</td>
      <td>2020-08-15</td>
      <td>5149351</td>
      <td>碧然德（BRITA）家用净水壶 滤水壶滤芯 MAXTRA+LE 去水垢专家滤芯 3枚装</td>
      <td>碧然德</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.442311</td>
      <td>高度-忠诚型</td>
      <td>74.562119</td>
      <td>L1-4</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>2011-1-1</td>
      <td>2019-12-04 22:35:59.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>607710</th>
      <td>龚思嘉</td>
      <td>124875168188</td>
      <td>124875168188</td>
      <td>2020-08-17 12:35:34.0</td>
      <td>2020-08-17</td>
      <td>4460778</td>
      <td>沁园（TRULIVA）家用净水器 即滤型超滤机 长寿命滤芯 无废水 矿物质净水机 QJ-UF...</td>
      <td>沁园（TRULIVA）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>7.002889</td>
      <td>高度-忠诚型</td>
      <td>15.897320</td>
      <td>L1-4</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>0001-1-1</td>
      <td>2019-11-02 09:57:09.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>607711</th>
      <td>龚磊gonglei31550</td>
      <td>130817561991</td>
      <td>130817561991</td>
      <td>2020-08-19 18:14:21.0</td>
      <td>2020-08-19</td>
      <td>61063726440</td>
      <td>杉贝电话机助响器 座机铃声放大器 固定手机响铃器声音扩音器超大特大</td>
      <td>杉贝</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>1.537553</td>
      <td>高度-忠诚型</td>
      <td>-1.000000</td>
      <td>L1-4</td>
      <td>L1-3</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1989-12-30</td>
      <td>2020-03-28 18:08:50.0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>607712 rows × 64 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_info_df = user_order_df.drop_duplicates(<span class="string">&quot;user_log_acct&quot;</span>,keep=<span class="string">&#x27;first&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_info_df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_log_acct</th>
      <th>parent_sale_ord_id</th>
      <th>sale_ord_id</th>
      <th>sale_ord_tm</th>
      <th>sale_ord_dt</th>
      <th>item_sku_id</th>
      <th>item_name</th>
      <th>brandname</th>
      <th>sale_qtty</th>
      <th>item_first_cate_name</th>
      <th>...</th>
      <th>cvl_glob_values</th>
      <th>cvl_glob_loyalty</th>
      <th>cvl_glob_platform</th>
      <th>cfv_sens_promotion</th>
      <th>cfv_sens_comment</th>
      <th>reg_user_type_cd</th>
      <th>member_reg_gender</th>
      <th>reg_birthday</th>
      <th>last_login_tm</th>
      <th>factory_user_flag</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>------1289</td>
      <td>130704863113</td>
      <td>124906164828</td>
      <td>2020-08-18 00:02:10.0</td>
      <td>2020-08-18</td>
      <td>100009149228</td>
      <td>飞利浦 (PHILIPS)蒸汽电熨斗家用 熨烫机 GC4902/28</td>
      <td>飞利浦（PHILIPS）</td>
      <td>2</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.037542</td>
      <td>高度-忠诚型</td>
      <td>77.973809</td>
      <td>L1-4</td>
      <td>L1-4</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>1997-2-10</td>
      <td>2020-08-11 22:55:05.0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>---刺猬</td>
      <td>130744622338</td>
      <td>130744622338</td>
      <td>2020-08-18 18:11:35.0</td>
      <td>2020-08-18</td>
      <td>100001679413</td>
      <td>安吉尔（Angel）茶吧机立式家用办公室饮水机多功能自动上水柜式茶吧机下置水桶式CB2705...</td>
      <td>安吉尔（Angel）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>1.859163</td>
      <td>高度-忠诚型</td>
      <td>79.137988</td>
      <td>L1-2</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>2019-12-11 18:29:44.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>10</th>
      <td>--寂</td>
      <td>124775599894</td>
      <td>124775599894</td>
      <td>2020-08-15 12:49:06.0</td>
      <td>2020-08-15</td>
      <td>2392546</td>
      <td>赛亿（Shinee）小风扇 台扇/台夹扇 壁扇 迷你静音学生宿舍床头办公室桌面换气电风扇FJ...</td>
      <td>赛亿（Shinee）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>3.187507</td>
      <td>高度-忠诚型</td>
      <td>-1.000000</td>
      <td>L1-4</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>2020-02-25 15:01:41.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>13</th>
      <td>-love明-</td>
      <td>130503457517</td>
      <td>130501451054</td>
      <td>2020-08-15 19:47:49.0</td>
      <td>2020-08-15</td>
      <td>3085665</td>
      <td>松下（Panasonic）吸尘器MC-WF350手持式真空吸尘器家用超大吸力手提式系列吸尘器...</td>
      <td>松下（Panasonic）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>9.721487</td>
      <td>高度-忠诚型</td>
      <td>69.125353</td>
      <td>L1-4</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1988-1-17</td>
      <td>2020-08-08 20:34:47.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>16</th>
      <td>-zhongzhong</td>
      <td>124778603709</td>
      <td>130550058117</td>
      <td>2020-08-15 12:53:08.0</td>
      <td>2020-08-15</td>
      <td>100012373764</td>
      <td>格力 （GREE）新品家用智能遥控定时电风扇/塔式落地扇/直流变频电扇/立式塔扇/无叶风扇F...</td>
      <td>格力（GREE）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>18.505648</td>
      <td>高度-忠诚型</td>
      <td>63.646321</td>
      <td>L1-3</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1986-10-22</td>
      <td>2020-08-12 14:24:47.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>607704</th>
      <td>龙龙豆豆1988</td>
      <td>124905744754</td>
      <td>124905744754</td>
      <td>2020-08-18 01:43:56.0</td>
      <td>2020-08-18</td>
      <td>5149337</td>
      <td>碧然德（BRITA）家用净水壶 滤水壶滤芯 MAXTRA+LE 去水垢专家滤芯 6枚装</td>
      <td>碧然德</td>
      <td>3</td>
      <td>家用电器</td>
      <td>...</td>
      <td>6.162832</td>
      <td>高度-忠诚型</td>
      <td>85.796222</td>
      <td>L1-4</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>1988-12-13</td>
      <td>2020-08-06 10:15:03.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>607706</th>
      <td>龚凤波</td>
      <td>124863599292</td>
      <td>124863599292</td>
      <td>2020-08-17 08:13:19.0</td>
      <td>2020-08-17</td>
      <td>100005221904</td>
      <td>康佳（KONKA）大型家用商用空调扇 制冷风扇 冷风机 冷风扇 车间食堂餐厅网吧大排档移动工...</td>
      <td>康佳（KONKA）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>3.911795</td>
      <td>高度-忠诚型</td>
      <td>-1.000000</td>
      <td>L1-2</td>
      <td>L1-3</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>2017-04-28 14:18:32.0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>607707</th>
      <td>龚天睿</td>
      <td>124772876191</td>
      <td>124772404564</td>
      <td>2020-08-15 11:03:24.0</td>
      <td>2020-08-15</td>
      <td>5149351</td>
      <td>碧然德（BRITA）家用净水壶 滤水壶滤芯 MAXTRA+LE 去水垢专家滤芯 3枚装</td>
      <td>碧然德</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>2.442311</td>
      <td>高度-忠诚型</td>
      <td>74.562119</td>
      <td>L1-4</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>2011-1-1</td>
      <td>2019-12-04 22:35:59.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>607710</th>
      <td>龚思嘉</td>
      <td>124875168188</td>
      <td>124875168188</td>
      <td>2020-08-17 12:35:34.0</td>
      <td>2020-08-17</td>
      <td>4460778</td>
      <td>沁园（TRULIVA）家用净水器 即滤型超滤机 长寿命滤芯 无废水 矿物质净水机 QJ-UF...</td>
      <td>沁园（TRULIVA）</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>7.002889</td>
      <td>高度-忠诚型</td>
      <td>15.897320</td>
      <td>L1-4</td>
      <td>L1-5</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>0001-1-1</td>
      <td>2019-11-02 09:57:09.0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>607711</th>
      <td>龚磊gonglei31550</td>
      <td>130817561991</td>
      <td>130817561991</td>
      <td>2020-08-19 18:14:21.0</td>
      <td>2020-08-19</td>
      <td>61063726440</td>
      <td>杉贝电话机助响器 座机铃声放大器 固定手机响铃器声音扩音器超大特大</td>
      <td>杉贝</td>
      <td>1</td>
      <td>家用电器</td>
      <td>...</td>
      <td>1.537553</td>
      <td>高度-忠诚型</td>
      <td>-1.000000</td>
      <td>L1-4</td>
      <td>L1-3</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>1989-12-30</td>
      <td>2020-03-28 18:08:50.0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>215090 rows × 64 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># user_info_df.to_csv(&quot;user_info_df.csv&quot;,index=0)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vaild_order_user_df = user_order_df[(user_order_df[<span class="string">&#x27;sale_ord_valid_flag&#x27;</span>] == <span class="number">1</span>)</span><br><span class="line">                          &amp;(user_order_df[<span class="string">&#x27;cancel_flag&#x27;</span>] == <span class="number">0</span>)</span><br><span class="line">                          &amp;(user_order_df[<span class="string">&#x27;check_account_tm&#x27;</span>] != <span class="number">0</span>)</span><br><span class="line">                          &amp;(user_order_df[<span class="string">&#x27;before_prefr_unit_price&#x27;</span>] != <span class="number">0</span>)</span><br><span class="line">                          &amp;(user_order_df[<span class="string">&#x27;user_actual_pay_amount&#x27;</span>] != <span class="number">0</span>)]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vaild_order_user_df = vaild_order_user_df.infer_objects()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vaild_order_user_df[<span class="string">&#x27;sale_ord_tm&#x27;</span>] = pd.to_datetime(vaild_order_user_df[<span class="string">&#x27;sale_ord_tm&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vaild_order_user_df[<span class="string">&#x27;order_time_hms&#x27;</span>] = vaild_order_user_df[<span class="string">&#x27;sale_ord_tm&#x27;</span>].apply(<span class="keyword">lambda</span> x:x.strftime(<span class="string">&#x27;%H:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h1 id="三、分析用户的基本特征"><a href="#三、分析用户的基本特征" class="headerlink" title="三、分析用户的基本特征"></a>三、分析用户的基本特征</h1><h2 id="3-1-用户性别和年龄分布"><a href="#3-1-用户性别和年龄分布" class="headerlink" title="3.1 用户性别和年龄分布"></a>3.1 用户性别和年龄分布</h2><p><img src="/2021/04/16/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E5%AE%9E%E6%88%98/%E7%94%A8%E6%88%B7%E6%80%A7%E5%88%AB%E5%88%86%E5%B8%83.jpg" alt="用户性别分布"></p>
<p><img src="/2021/04/16/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E5%AE%9E%E6%88%98/%E7%94%A8%E6%88%B7%E5%B9%B4%E9%BE%84%E5%88%86%E5%B8%83.jpg" alt="用户年龄分布"></p>
<p>从数据来看，用户消费没有明显的性别偏好，男性用户稍微多一点，用户的年龄集中在25-35岁之间，25岁以下以及45岁以上的用户数较少。</p>
<p>25岁以下的用户多为在校学生，对于家电类目的购买需求低</p>
<p>45岁以上的用户多为中年人员，家电类目需求低，同时手机网购的比例低</p>
<h2 id="3-2-用户的地域分布"><a href="#3-2-用户的地域分布" class="headerlink" title="3.2 用户的地域分布"></a>3.2 用户的地域分布</h2><p><img src="/2021/04/16/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E5%AE%9E%E6%88%98/%E7%94%A8%E6%88%B7%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83.jpg" alt="地域"></p>
<p><img src="/2021/04/16/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E5%AE%9E%E6%88%98/%E7%94%A8%E6%88%B7%E5%9F%8E%E5%B8%82%E5%88%86%E5%B8%83.jpg" alt="城市"></p>
<p>用户在城市分布上具有一定的集中性，大多集中在一线和新一线城市，因为一线城市对年轻人有很强的吸引力，因此城市分布和用户的年龄分布也相符合.</p>
<h2 id="3-3-用户的婚育状况、学历和职业分布"><a href="#3-3-用户的婚育状况、学历和职业分布" class="headerlink" title="3.3 用户的婚育状况、学历和职业分布"></a>3.3 用户的婚育状况、学历和职业分布</h2><p><img src="/2021/04/16/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E5%AE%9E%E6%88%98/%E7%94%A8%E6%88%B7%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%8102.jpg" alt="婚姻"></p>
<p>从图中的数据来看，近70%的小家电用户都是已婚，超过60%的用户有小孩的可能性高</p>
<p>通过用户的基础属性的研判来看，小家电的典型用户为：</p>
<ul>
<li>男性，年龄在28-30岁左右，已婚且有孩子</li>
<li>他在一线城市居中，本科学历，在一家互联网公司任职，有比较稳定的收入</li>
<li>因为还刚进入婚姻，因此有一定的生活品质追求，同时比较关注家庭生活</li>
</ul>
<p>因此，我们给运营同事的建议是，文案不用过于个性，促销的商品要重点突出家庭品质生活属性，同时强调家电的健康与安全</p>
<h1 id="四、用户的行为特征"><a href="#四、用户的行为特征" class="headerlink" title="四、用户的行为特征"></a>四、用户的行为特征</h1><p><img src="/2021/04/16/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E5%AE%9E%E6%88%98/%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E7%89%B9%E5%BE%81.jpg" alt="image.png"></p>
<p><img src="/2021/04/16/%E7%94%B5%E5%95%86%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E5%AE%9E%E6%88%98/%E6%97%B6%E9%97%B4%E5%88%86%E5%B8%83%E6%8A%98%E7%BA%BF%E5%9B%BE.png" alt="image.png"></p>
<p>用户购买商品的类目是用户的行为数据，从图中的数据来看，最受欢迎的电器是电风扇，<br>考虑到这个数据采集的时间是8月12日，用户购买电风扇的需求得到了释放，在即将进入秋天，因此应该对其它商品 比如净水器，加湿器等商品进行促销</p>
<p>从日期和时间维度来看，订单成交的高峰在周二和周六，从每天的时间来看，早上10点-11点，晚上20点-22点有较大的成交量。</p>
<p>推测形成的原因，每周的周二和周六用户更喜欢访问电商网站，并在早上10点左右下单，或者晚上10准备上床休息时下单。</p>
<p>通过用户敏感度分析来看，用户对价格较为敏感，同时对评论极度敏感，因此促销活动的商品需要选择有较好口碑的商品，才能提升活动的转化率</p>
<h1 id="四、建议"><a href="#四、建议" class="headerlink" title="四、建议"></a>四、建议</h1><p>因此我们给运营同事的建议是：</p>
<p>促销活动的文案最好采用中性风格，促销的商品要重点突出家庭品质生活属性，同时强调家电的健康与安全<br>促销的商品以夏末秋初需求旺盛的商品，如净水器，饮水机，加湿器等产品入手<br>促销广告投放的时间，最好选择在每周的周二和周六这2个时间段，同时在早上9点和晚上9点提高广告的频率<br>促销的商品需要选择评论口碑较好的产品，可以在广告中对商品的口碑进行介绍</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># user_order_hms_df = vaild_order_user_df.groupby(&#x27;order_time_hms&#x27;,as_index=False)[&#x27;sale_ord_id&#x27;].agg(&#123;&#x27;hms_count&#x27;:&#x27;count&#x27;&#125;)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># user_order_hms_df</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>order_time_hms</th>
      <th>hms_count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>00:00:00</td>
      <td>13212</td>
    </tr>
    <tr>
      <th>1</th>
      <td>01:00:00</td>
      <td>4087</td>
    </tr>
    <tr>
      <th>2</th>
      <td>02:00:00</td>
      <td>1919</td>
    </tr>
    <tr>
      <th>3</th>
      <td>03:00:00</td>
      <td>1242</td>
    </tr>
    <tr>
      <th>4</th>
      <td>04:00:00</td>
      <td>892</td>
    </tr>
    <tr>
      <th>5</th>
      <td>05:00:00</td>
      <td>1216</td>
    </tr>
    <tr>
      <th>6</th>
      <td>06:00:00</td>
      <td>3052</td>
    </tr>
    <tr>
      <th>7</th>
      <td>07:00:00</td>
      <td>5946</td>
    </tr>
    <tr>
      <th>8</th>
      <td>08:00:00</td>
      <td>10058</td>
    </tr>
    <tr>
      <th>9</th>
      <td>09:00:00</td>
      <td>13550</td>
    </tr>
    <tr>
      <th>10</th>
      <td>10:00:00</td>
      <td>15344</td>
    </tr>
    <tr>
      <th>11</th>
      <td>11:00:00</td>
      <td>14861</td>
    </tr>
    <tr>
      <th>12</th>
      <td>12:00:00</td>
      <td>13881</td>
    </tr>
    <tr>
      <th>13</th>
      <td>13:00:00</td>
      <td>12522</td>
    </tr>
    <tr>
      <th>14</th>
      <td>14:00:00</td>
      <td>13919</td>
    </tr>
    <tr>
      <th>15</th>
      <td>15:00:00</td>
      <td>12638</td>
    </tr>
    <tr>
      <th>16</th>
      <td>16:00:00</td>
      <td>12384</td>
    </tr>
    <tr>
      <th>17</th>
      <td>17:00:00</td>
      <td>11662</td>
    </tr>
    <tr>
      <th>18</th>
      <td>18:00:00</td>
      <td>10339</td>
    </tr>
    <tr>
      <th>19</th>
      <td>19:00:00</td>
      <td>9730</td>
    </tr>
    <tr>
      <th>20</th>
      <td>20:00:00</td>
      <td>11665</td>
    </tr>
    <tr>
      <th>21</th>
      <td>21:00:00</td>
      <td>12868</td>
    </tr>
    <tr>
      <th>22</th>
      <td>22:00:00</td>
      <td>14251</td>
    </tr>
    <tr>
      <th>23</th>
      <td>23:00:00</td>
      <td>11361</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from pyecharts import options as opts</span></span><br><span class="line"><span class="comment"># from pyecharts.charts import Line</span></span><br><span class="line"><span class="comment"># from pyecharts.globals import CurrentConfig, NotebookType  </span></span><br><span class="line"><span class="comment"># CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># user_order_hms_df.values.tolist()</span></span><br></pre></td></tr></table></figure>




<pre><code>[[&#39;00:00:00&#39;, 13212],
 [&#39;01:00:00&#39;, 4087],
 [&#39;02:00:00&#39;, 1919],
 [&#39;03:00:00&#39;, 1242],
 [&#39;04:00:00&#39;, 892],
 [&#39;05:00:00&#39;, 1216],
 [&#39;06:00:00&#39;, 3052],
 [&#39;07:00:00&#39;, 5946],
 [&#39;08:00:00&#39;, 10058],
 [&#39;09:00:00&#39;, 13550],
 [&#39;10:00:00&#39;, 15344],
 [&#39;11:00:00&#39;, 14861],
 [&#39;12:00:00&#39;, 13881],
 [&#39;13:00:00&#39;, 12522],
 [&#39;14:00:00&#39;, 13919],
 [&#39;15:00:00&#39;, 12638],
 [&#39;16:00:00&#39;, 12384],
 [&#39;17:00:00&#39;, 11662],
 [&#39;18:00:00&#39;, 10339],
 [&#39;19:00:00&#39;, 9730],
 [&#39;20:00:00&#39;, 11665],
 [&#39;21:00:00&#39;, 12868],
 [&#39;22:00:00&#39;, 14251],
 [&#39;23:00:00&#39;, 11361]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># line = (Line()</span></span><br><span class="line"><span class="comment">#     .set_global_opts(</span></span><br><span class="line"><span class="comment">#         toolbox_opts=opts.ToolboxOpts(is_show=True),</span></span><br><span class="line"><span class="comment">#         title_opts=opts.TitleOpts(title=&quot;时间分布折线图&quot;),</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#     .add_xaxis(xaxis_data=user_order_hms_df[&quot;order_time_hms&quot;].values.tolist())</span></span><br><span class="line"><span class="comment">#     .add_yaxis(</span></span><br><span class="line"><span class="comment">#         series_name=&#x27;时间分布折线图&#x27;,</span></span><br><span class="line"><span class="comment">#         y_axis=user_order_hms_df[&quot;hms_count&quot;].values.tolist(),</span></span><br><span class="line"><span class="comment">#         is_smooth=True,</span></span><br><span class="line"><span class="comment">#         markpoint_opts=opts.MarkPointOpts(</span></span><br><span class="line"><span class="comment">#             data=[</span></span><br><span class="line"><span class="comment">#                 opts.MarkPointItem(type_=&quot;max&quot;, name=&quot;最大值&quot;),</span></span><br><span class="line"><span class="comment">#                 opts.MarkPointItem(type_=&quot;min&quot;, name=&quot;最小值&quot;),</span></span><br><span class="line"><span class="comment">#             ]</span></span><br><span class="line"><span class="comment">#         )</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#        )</span></span><br><span class="line"><span class="comment"># line.load_javascript()</span></span><br><span class="line"><span class="comment"># line.render_notebook()</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析实战</category>
      </categories>
  </entry>
</search>
